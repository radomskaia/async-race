{"version":3,"file":"main-DhS32fEc.js","sources":["../../src/constants/buttons-constants.ts","../../src/constants/constants.ts","../../src/services/di-container.ts","../../src/types/di-container-types.ts","../../src/components/base-component.ts","../../src/types/event-emitter-types.ts","../../src/components/buttons/base-button.ts","../../src/components/buttons/icon-button.ts","../../src/components/buttons/settings/button-settings.ts","../../src/components/buttons/settings/theme-button.ts","../../src/services/settings/settings-action.ts","../../src/constants/theme-constants.ts","../../src/services/settings/theme-service.ts","../../src/components/buttons/text-button.ts","../../src/components/header/header.ts","../../src/components/input/base-input.ts","../../src/constants/input-constants.ts","../../src/components/input/car-name-input.ts","../../src/components/input/car-color-input.ts","../../src/constants/cars-model.ts","../../src/utilities/utilities.ts","../../src/types/session-storage-types.ts","../../src/types/validator-types.ts","../../src/components/car-form/base-form.ts","../../src/types/button-types.ts","../../src/components/car-form/update-form.ts","../../src/components/cars/car-item.ts","../../src/components/cars/cars-list.ts","../../src/components/car-form/create-form.ts","../../src/components/pagination/base-pagination.ts","../../src/components/pagination/garage-pagination.ts","../../src/pages/home/home.ts","../../src/pages/not-found.ts","../../src/components/pagination/winner-pagination.ts","../../src/types/api-service-types.ts","../../src/pages/winners/winners.ts","../../src/pages/routes.ts","../../src/services/router.ts","../../src/services/api/api-service.ts","../../src/services/race/animate-car.ts","../../src/services/race/race-service.ts","../../src/services/event-emitter.ts","../../src/services/api/winner-service.ts","../../src/services/api/garage-service.ts","../../src/services/api/engine-service.ts","../../src/services/session-storage.ts","../../src/services/validator.ts","../../src/services/services.ts","../../src/components/modal/base/base-modal.ts","../../src/components/modal/winner-modal.ts","../../src/app.ts","../../src/main.ts"],"sourcesContent":["// Buttons\nexport const BUTTON_TEXT = {\n  TO_GARAGE: \"To garage\",\n  TO_WINNERS: \"To winners\",\n  PREVIOUS: \"Previous page\",\n  NEXT: \"Next page\",\n  FIRST: \"First page\",\n  LAST: \"Last page\",\n  START_RACE: \"Start race\",\n  RESET: \"Reset\",\n  GENERATE_CARS: \"Generate cars\",\n  CREATE: \"Create\",\n  DELETE: \"Delete\",\n  EDIT: \"Edit\",\n  START_ENGINE: \" Start engine\",\n  STOP_ENGINE: \"Stop engine\",\n  CROSS: \"cross\",\n  CONFIRM: \"confirm\",\n  ORDER: \"Change sort order\",\n  THEME: \"theme\",\n} as const;\nexport const BUTTON_TITLE = {\n  VOLUME: \"Volume\",\n  ID: \"ID\",\n  THEME: \"Change theme\",\n} as const;\nexport const SVG_CONFIG = {\n  NAMESPACE_SVG: \"http://www.w3.org/2000/svg\",\n  NAMESPACE_XLINK: \"http://www.w3.org/1999/xlink\",\n  QUALIFIED_NAME: \"xlink:href\",\n  ROLE: \"img\",\n} as const;\nconst SPRITE_PATH = \"./sprite.svg#\";\nexport const ICON_PATH = {\n  SOUND: {\n    ON: SPRITE_PATH + \"sound-on\",\n    OFF: SPRITE_PATH + \"sound-off\",\n  },\n  THEME: {\n    ON: SPRITE_PATH + \"theme-light\",\n    OFF: SPRITE_PATH + \"theme-dark\",\n  },\n  DELETE: SPRITE_PATH + \"delete\",\n  BACK: SPRITE_PATH + \"back\",\n  START_ENGINE: SPRITE_PATH + \"start\",\n  STOP_ENGINE: SPRITE_PATH + \"stop\",\n  ADD: SPRITE_PATH + \"add\",\n  CAR: SPRITE_PATH + \"car2\",\n  EDIT: SPRITE_PATH + \"edit\",\n  CROSS: SPRITE_PATH + \"cross\",\n  CONFIRM: SPRITE_PATH + \"confirm\",\n  FIRST: SPRITE_PATH + \"doubleArrowLeft\",\n  LAST: SPRITE_PATH + \"doubleArrowRight\",\n  NEXT: SPRITE_PATH + \"arrowRight\",\n  PREVIOUS: SPRITE_PATH + \"arrowLeft\",\n  START_RACE: SPRITE_PATH + \"startRace\",\n  RESET: SPRITE_PATH + \"reset\",\n  GENERATE_CARS: SPRITE_PATH + \"wheel\",\n  ORDER: SPRITE_PATH + \"sort\",\n} as const;\nexport const BUTTON_TYPES = {\n  SUBMIT: \"submit\",\n} as const;\n","export const APP_NAME = \"Async Race\";\n\nexport const LS_PREFIX = \"radomskaia--async-race--\";\n\n// Common constants\nexport const ZERO = 0;\nexport const ONE = 1;\nexport const TWO = 2;\nexport const EMPTY_STRING = \"\";\nexport const CARS_COUNT = 100;\nexport const MS_IS_SECOND = 1000;\nexport const SYMBOLS = {\n  HASH: \"#\",\n  BRACKET: {\n    OPEN: \"(\",\n    CLOSE: \")\",\n  },\n};\n\nexport const COLOR = {\n  RGB: \"RGB\",\n  RANGE: 256,\n  HEX_BASE: 16,\n  HEX_LENGTH: 2,\n  ZERO_PAD: \"0\",\n};\n\nexport const PAGE_PATH = {\n  HOME: \"/\",\n  WINNERS: \"/winners\",\n  NOT_FOUND: \"404\",\n} as const;\n\n// Messages\nexport const MESSAGES = {\n  ROUTE_NOT_FOUND: \"Route not found\",\n  NOT_INITIALIZED: \"Class is not initialized\",\n  PAGE_NOT_FOUND: \"Sorry, page not found\",\n  INVALID_DATA: \"Invalid data\",\n} as const;\n\nexport enum API_URLS {\n  WINNERS = \"/winners\",\n  GARAGE = \"/garage\",\n  ENGINE = \"/engine\",\n}\n\nexport const CAR_KEYS = {\n  NAME: \"name\",\n  COLOR: \"color\",\n  ID: \"id\",\n} as const;\n\nexport const RACE_KEYS = {\n  VELOCITY: \"velocity\",\n  DISTANCE: \"distance\",\n} as const;\n\nexport const RESPONSE_DATA_KEYS = {\n  DATA: \"data\",\n  COUNT: \"count\",\n} as const;\n\nexport const WINNER_KEYS = {\n  ID: \"id\",\n  WINS: \"wins\",\n  TIME: \"time\",\n} as const;\n\nexport const CARS_PER_PAGE = 7;\nexport const WINNERS_PER_PAGE = 10;\n\nexport const API_URL = \"http://localhost:3000\";\nexport const API_HEADER = {\n  \"Content-Type\": \"application/json\",\n} as const;\nexport const COUNT_HEADER = \"X-Total-Count\";\n\nexport const NOTIFICATION_TIME = 4000;\n\nexport const ERROR_MESSAGES = {\n  PATH_REQUIRED: \"Path is required\",\n  INVALID_DATA: \"Invalid data\",\n  NO_LISTENERS: \"No listeners for event type\",\n  ABORTED: \"Aborted\",\n  RACE_STOPPED: \"Race stopped by user\",\n  FETCH: \"Error while fetching data: \",\n  SERVICE_NOT_FOUND: \"Service not found\",\n  INVALID_SERVICE: \"Invalid service\",\n  CONTAINER_NOT_FOUND: \"Container not found\",\n} as const;\n\nexport const ATTRIBUTES = {\n  FILL: \"fill\",\n  ARIA_LABEL: \"aria-label\",\n} as const;\n\nexport const WINNER_MESSAGE = \"Winner is\";\nexport const TIME_MESSAGE = \"with time\";\n\nexport const PAGE_NAME = {\n  GARAGE: \"Garage\",\n  WINNERS: \"Winners\",\n};\n\nexport const WINNERS_TABLE_HEADERS = [\n  \"ID\",\n  \"Car\",\n  \"Name\",\n  \"Wins\",\n  \"Time\",\n] as const;\n\nexport const SUFFIXES = {\n  COUNT: \"x\",\n  SECONDS: \"s\",\n};\n\nexport const ANIMATE_FILL_MODE = \"forwards\";\n","import type {\n  Injectable,\n  ServiceMap,\n  ServiceName,\n} from \"@/types/di-container-types.ts\";\nimport { ERROR_MESSAGES } from \"@/constants/constants.ts\";\n\nexport class DIContainer {\n  private static instance: DIContainer | undefined;\n  private services: Map<string, Injectable>;\n  private factory: Map<string, new () => Injectable>;\n  private constructor() {\n    this.services = new Map();\n    this.factory = new Map();\n  }\n  public static getInstance(): DIContainer {\n    if (!DIContainer.instance) {\n      DIContainer.instance = new DIContainer();\n    }\n    return DIContainer.instance;\n  }\n\n  private static isServiceType<T extends ServiceName>(\n    name: T,\n    service: Injectable,\n  ): service is ServiceMap[T] {\n    return service.name === name;\n  }\n\n  public register(name: ServiceName, service: new () => Injectable): void {\n    this.factory.set(name, service);\n  }\n\n  public getService<T extends ServiceName>(name: T): ServiceMap[T] {\n    let service = this.services.get(name);\n    if (!service) {\n      const factoryService = this.factory.get(name);\n      if (!factoryService) {\n        throw new Error(`${ERROR_MESSAGES.SERVICE_NOT_FOUND} ${name}`);\n      }\n      service = new factoryService();\n      this.services.set(name, service);\n    }\n    if (!DIContainer.isServiceType(name, service)) {\n      throw new Error(`${ERROR_MESSAGES.INVALID_SERVICE} ${name}`);\n    }\n    return service;\n  }\n}\n","import type { EventEmitter } from \"@/services/event-emitter.ts\";\nimport type { RaceService } from \"@/services/race/race-service.ts\";\nimport type { ApiService } from \"@/services/api/api-service.ts\";\nimport type { Router } from \"@/services/router.ts\";\nimport type { WinnerService } from \"@/services/api/winner-service.ts\";\nimport type { GarageService } from \"@/services/api/garage-service.ts\";\nimport type { EngineService } from \"@/services/api/engine-service.ts\";\nimport type { SessionStorage } from \"@/services/session-storage.ts\";\nimport type { Validator } from \"@/services/validator.ts\";\n\nexport interface Injectable {\n  name: ServiceName;\n}\n\nexport enum ServiceName {\n  API = \"apiService\",\n  RACE = \"raceService\",\n  ROUTER = \"router\",\n  EVENT_EMITTER = \"eventEmitter\",\n  WINNER = \"winnerService\",\n  GARAGE = \"garageService\",\n  ENGINE = \"engineService\",\n  STORAGE = \"sessionStorage\",\n  VALIDATOR = \"validator\",\n}\n\nexport interface ServiceMap {\n  [ServiceName.API]: ApiService;\n  [ServiceName.RACE]: RaceService;\n  [ServiceName.ROUTER]: Router;\n  [ServiceName.EVENT_EMITTER]: EventEmitter;\n  [ServiceName.WINNER]: WinnerService;\n  [ServiceName.GARAGE]: GarageService;\n  [ServiceName.ENGINE]: EngineService;\n  [ServiceName.STORAGE]: SessionStorage;\n  [ServiceName.VALIDATOR]: Validator;\n}\n","import { SVG_CONFIG } from \"@/constants/buttons-constants.ts\";\nimport type {\n  Action,\n  ActionType,\n  Observer,\n  RegisterEvent,\n} from \"@/types/event-emitter-types.ts\";\nimport type { Callback } from \"@/types/button-types.ts\";\nimport { DIContainer } from \"@/services/di-container.ts\";\nimport { ServiceName } from \"@/types/di-container-types.ts\";\nimport type {\n  AddAttributes,\n  AddClassList,\n  AddTextContent,\n  CreateDOMElement,\n  CreateSVG,\n} from \"@/types/base-component-types.ts\";\nimport { ERROR_MESSAGES } from \"@/constants/constants.ts\";\n\nexport abstract class BaseComponent<\n  T extends keyof HTMLElementTagNameMap,\n  O = void,\n> implements Observer\n{\n  protected element: HTMLElementTagNameMap[T];\n  protected listeners = new Map<ActionType, Callback[]>();\n\n  protected constructor(options?: O) {\n    this.element = this.createElement(options);\n  }\n\n  public registerEvent: RegisterEvent = (eventType, callback) => {\n    if (!this.listeners.has(eventType)) {\n      this.listeners.set(eventType, []);\n    }\n    const callbackArray = this.listeners.get(eventType);\n    callbackArray?.push(callback);\n    DIContainer.getInstance()\n      .getService(ServiceName.EVENT_EMITTER)\n      .subscribe(eventType, this);\n  };\n\n  public update(event: Action): void {\n    const callbackArray = this.listeners.get(event.type);\n    if (!callbackArray) {\n      console.info(ERROR_MESSAGES.NO_LISTENERS);\n      return;\n    }\n    for (const callback of callbackArray) {\n      callback(event.data);\n    }\n  }\n\n  public getElement(): HTMLElementTagNameMap[T] {\n    return this.element;\n  }\n\n  public appendElement(...child: Element[]): void {\n    this.element.append(...child);\n  }\n\n  public addTextContent: AddTextContent = (textContent, element) => {\n    element = element ?? this.element;\n    element.textContent = textContent;\n  };\n\n  public clearElement(): void {\n    this.element.replaceChildren();\n  }\n\n  protected createDOMElement: CreateDOMElement = ({\n    tagName,\n    classList,\n    textContent,\n    attributes,\n  }) => {\n    const element = document.createElement(tagName);\n    if (classList) {\n      this.addClassList(classList, element);\n    }\n    if (attributes) {\n      this.addAttributes(attributes, element);\n    }\n    if (textContent) {\n      this.addTextContent(textContent, element);\n    }\n\n    return element;\n  };\n\n  protected addClassList: AddClassList = (classList, element?) => {\n    element = element ?? this.element;\n    element.classList.add(...classList);\n  };\n\n  protected addAttributes: AddAttributes = (attributes, element?) => {\n    element = element ?? this.element;\n    for (const [key, value] of Object.entries(attributes)) {\n      element.setAttribute(key, value);\n    }\n  };\n\n  protected createSVG: CreateSVG = ({ path, classList, attributes }) => {\n    const svg = document.createElementNS(SVG_CONFIG.NAMESPACE_SVG, \"svg\");\n    this.addAttributes({ ...attributes, role: SVG_CONFIG.ROLE }, svg);\n    this.addClassList(classList, svg);\n    const use = document.createElementNS(SVG_CONFIG.NAMESPACE_SVG, \"use\");\n    use.setAttributeNS(\n      SVG_CONFIG.NAMESPACE_XLINK,\n      SVG_CONFIG.QUALIFIED_NAME,\n      path,\n    );\n    svg.append(use);\n    return { use, svg };\n  };\n\n  protected abstract createElement(options?: O): HTMLElementTagNameMap[T];\n}\n","import type { Callback } from \"@/types/button-types.ts\";\n\nexport enum ActionType {\n  listUpdated = \"listUpdated\",\n  winnerDetected = \"winnerDetected\",\n  raceStarted = \"raceStarted\",\n  raceEnded = \"raceEnded\",\n  singleRaceStarted = \"singleRaceStarted\",\n  singleRaceEnded = \"singleRaceEnded\",\n  updateCar = \"updateCar\",\n  paginationUpdated = \"paginationUpdated\",\n  changeRoute = \"changeRoute\",\n  enginesStarted = \"enginesStarted\",\n}\n\nexport type RegisterObserver = (\n  eventType: ActionType,\n  observer: Observer,\n) => void;\n\nexport interface Action {\n  type: ActionType;\n  data?: unknown;\n}\n\nexport interface Observer {\n  update(event: Action): void;\n}\n\nexport type RegisterEvent = (eventType: ActionType, callback: Callback) => void;\n","import styles from \"./button.module.css\";\n\nimport { BaseComponent } from \"@/components/base-component.ts\";\nimport type { ButtonOptions, Callback } from \"@/types/button-types.ts\";\nimport { ActionType } from \"@/types/event-emitter-types.ts\";\nimport { ZERO } from \"@/constants/constants.ts\";\n\nexport class BaseButton extends BaseComponent<\"button\", ButtonOptions> {\n  private wasDisabled: {\n    isDisabled: boolean;\n    singleStack: boolean[];\n  } = {\n    isDisabled: false,\n    singleStack: [],\n  };\n  constructor(callback?: Callback) {\n    super();\n    if (callback) {\n      this.addListener(callback);\n    }\n  }\n\n  public toggleDisabled(): void {\n    this.disabledElement(!this.element.disabled);\n  }\n\n  public disabledElement(isDisabled: boolean): void {\n    this.element.disabled = isDisabled;\n  }\n\n  public addListener(callback: Callback): void {\n    this.element.addEventListener(\"click\", callback);\n  }\n\n  protected createElement(): HTMLButtonElement {\n    return this.createDOMElement({\n      tagName: \"button\",\n      classList: [styles.button],\n    });\n  }\n\n  public addRaceListeners(id?: number, isSingle = false): void {\n    if (isSingle) {\n      this.registerEvent(ActionType.singleRaceStarted, (eventID) => {\n        if (eventID !== id) {\n          return;\n        }\n        this.wasDisabled.singleStack.push(true);\n        this.wasDisabled.isDisabled = this.element.disabled;\n        this.disabledElement(true);\n      });\n\n      this.registerEvent(ActionType.singleRaceEnded, (eventID) => {\n        if (eventID !== id && this.wasDisabled) {\n          return;\n        }\n        this.wasDisabled.singleStack.pop();\n        this.disabledElement(false);\n      });\n    } else {\n      this.registerEvent(ActionType.singleRaceStarted, () => {\n        this.wasDisabled.isDisabled = this.element.disabled;\n        this.disabledElement(true);\n      });\n    }\n\n    this.registerEvent(ActionType.raceEnded, () => {\n      if (\n        this.wasDisabled.isDisabled &&\n        this.wasDisabled.singleStack.length !== ZERO\n      ) {\n        return;\n      }\n      this.disabledElement(false);\n    });\n\n    this.registerEvent(ActionType.raceStarted, () => {\n      this.wasDisabled.isDisabled = this.element.disabled;\n      this.disabledElement(true);\n    });\n  }\n}\n","import styles from \"./button.module.css\";\n\nimport { BaseButton } from \"@/components/buttons/base-button.ts\";\nimport { ATTRIBUTES } from \"@/constants/constants.ts\";\nimport type { ButtonOptions, Callback } from \"@/types/button-types.ts\";\n\nexport class IconButton extends BaseButton {\n  protected useSVGIcon: SVGUseElement;\n\n  constructor(options: Required<ButtonOptions>, callback?: Callback) {\n    super(callback);\n    this.element.title = options.title;\n    const { use, svg } = this.createSVG({\n      path: options.path,\n      classList: [styles.iconButton, ...options.classList],\n      attributes: {\n        title: options.title,\n        [ATTRIBUTES.ARIA_LABEL]: options.title,\n      },\n    });\n    this.useSVGIcon = use;\n    this.appendElement(svg);\n  }\n}\n","import styles from \"@/components/buttons/button.module.css\";\nimport type { SettingsAction } from \"@/services/settings/settings-action.ts\";\nimport { IconButton } from \"@/components/buttons/icon-button.ts\";\nimport { SVG_CONFIG } from \"@/constants/buttons-constants.ts\";\nimport type { ButtonOptions } from \"@/types/button-types.ts\";\nimport { ERROR_MESSAGES } from \"@/constants/constants.ts\";\n\nexport abstract class ButtonSettings extends IconButton {\n  protected abstract pathOff: string;\n  protected abstract pathOn: string;\n  protected abstract title: string;\n\n  protected constructor(options: ButtonOptions) {\n    if (!options.path) {\n      throw new Error(ERROR_MESSAGES.PATH_REQUIRED);\n    }\n    super({\n      title: options.title,\n      classList: options.classList ?? [],\n      path: options.path,\n    });\n    this.addClassList([styles.settings]);\n  }\n\n  public togglePath(isOn: boolean): void {\n    const path = isOn ? this.pathOff : this.pathOn;\n    this.useSVGIcon.setAttributeNS(\n      SVG_CONFIG.NAMESPACE_XLINK,\n      SVG_CONFIG.QUALIFIED_NAME,\n      path,\n    );\n  }\n\n  public addToggleListener(action: SettingsAction): void {\n    this.addListener(() => {\n      action.toggle();\n    });\n  }\n}\n","import { ButtonSettings } from \"@/components/buttons/settings/button-settings.ts\";\nimport { BUTTON_TITLE, ICON_PATH } from \"@/constants/buttons-constants.ts\";\n\nexport class ThemeButton extends ButtonSettings {\n  protected readonly pathOn: string;\n  protected readonly pathOff = ICON_PATH.THEME.OFF;\n  protected readonly title: string;\n\n  constructor() {\n    const path = ICON_PATH.THEME.ON;\n    const title = BUTTON_TITLE.THEME;\n    super({\n      path,\n      title,\n    });\n    this.title = title;\n    this.pathOn = path;\n  }\n}\n","import type { ButtonSettings } from \"@/components/buttons/settings/button-settings.ts\";\n\nexport abstract class SettingsAction {\n  protected abstract isOff: boolean;\n  protected constructor(protected button: ButtonSettings) {\n    this.button = button;\n  }\n\n  public abstract toggle(): void;\n}\n","export const DARK_THEME_MEDIA_QUERY = \"(prefers-color-scheme: dark)\";\nexport const DARK_THEME_ATTRIBUTE = \"data-theme\";\n","import type { ButtonSettings } from \"@/components/buttons/settings/button-settings.ts\";\nimport { SettingsAction } from \"@/services/settings/settings-action.ts\";\nimport { MESSAGES } from \"@/constants/constants.ts\";\nimport {\n  DARK_THEME_ATTRIBUTE,\n  DARK_THEME_MEDIA_QUERY,\n} from \"@/constants/theme-constants.ts\";\n\nexport class ThemeService extends SettingsAction {\n  private static instance: ThemeService | undefined;\n  protected isOff: boolean;\n  private mediaQueryList: MediaQueryList;\n  constructor(themeButton: ButtonSettings) {\n    super(themeButton);\n    this.mediaQueryList = globalThis.matchMedia(DARK_THEME_MEDIA_QUERY);\n    this.isOff = this.mediaQueryList.matches;\n    this.changeTheme(this.isOff);\n    this.mediaQueryList.addEventListener(\"change\", (event) => {\n      this.changeTheme(event.matches);\n    });\n  }\n\n  public static getInstance(audioButton?: ButtonSettings): ThemeService {\n    if (!ThemeService.instance) {\n      if (!audioButton) {\n        throw new Error(MESSAGES.NOT_INITIALIZED);\n      }\n      ThemeService.instance = new ThemeService(audioButton);\n    }\n    return ThemeService.instance;\n  }\n\n  public toggle(): void {\n    this.isOff = !this.isOff;\n    this.changeTheme(this.isOff);\n  }\n\n  private changeTheme(isDark: boolean): void {\n    this.button.togglePath(isDark);\n    document.body.toggleAttribute(DARK_THEME_ATTRIBUTE, isDark);\n  }\n}\n","import type { Callback } from \"@/types\";\nimport { BaseButton } from \"@/components/buttons/base-button.ts\";\nimport styles from \"@/components/buttons/button.module.css\";\n\nexport class TextButton extends BaseButton {\n  constructor(text: string, callback?: Callback) {\n    super(callback);\n    this.element.textContent = text;\n    this.addClassList([styles.actionButton]);\n  }\n}\n","import utilitiesStyles from \"@/styles/utilities.module.css\";\nimport styles from \"@/components/header/header.module.css\";\nimport { BaseComponent } from \"@/components/base-component.ts\";\nimport { ThemeButton } from \"@/components/buttons/settings/theme-button.ts\";\nimport { ThemeService } from \"@/services/settings/theme-service.ts\";\nimport { APP_NAME, PAGE_PATH } from \"@/constants/constants.ts\";\nimport { TextButton } from \"@/components/buttons/text-button.ts\";\nimport { BUTTON_TEXT } from \"@/constants/buttons-constants.ts\";\nimport { DIContainer } from \"@/services/di-container.ts\";\nimport { ServiceName } from \"@/types/di-container-types.ts\";\nimport { ActionType } from \"@/types/event-emitter-types.ts\";\n\nexport class Header extends BaseComponent<\"header\"> {\n  private readonly settingsButton = {\n    theme: {\n      button: ThemeButton,\n      action: ThemeService,\n    },\n  };\n  private readonly settingsWrapper: HTMLDivElement;\n  private readonly pagesWrapper: HTMLDivElement;\n\n  private disabledConfig: Record<string, string> = {\n    [BUTTON_TEXT.TO_WINNERS]: PAGE_PATH.WINNERS,\n    [BUTTON_TEXT.TO_GARAGE]: PAGE_PATH.HOME,\n  };\n  constructor() {\n    super();\n    this.settingsWrapper = this.createSettingsWrapper();\n    this.pagesWrapper = this.createPagesWrapper();\n    this.appendElement(this.pagesWrapper, this.settingsWrapper);\n  }\n\n  public addSettingsButton(buttonName: keyof typeof this.settingsButton): this {\n    const button = new this.settingsButton[buttonName].button();\n    const action = this.settingsButton[buttonName].action.getInstance(button);\n    button.addToggleListener(action);\n    this.settingsWrapper.append(button.getElement());\n    return this;\n  }\n\n  public addPageButton(buttonName: string): this {\n    const router = DIContainer.getInstance().getService(ServiceName.ROUTER);\n    const button = new TextButton(buttonName);\n\n    button.registerEvent(ActionType.changeRoute, (data: unknown) => {\n      const isDisabled = this.disabledConfig[buttonName] === data;\n      button.disabledElement(isDisabled);\n    });\n\n    button.addListener(() => {\n      router.navigateTo(this.disabledConfig[buttonName]);\n    });\n\n    if (buttonName !== BUTTON_TEXT.TO_GARAGE) {\n      button.addRaceListeners();\n    }\n\n    this.pagesWrapper.append(button.getElement());\n    return this;\n  }\n\n  protected createElement(): HTMLElement {\n    const header = this.createDOMElement({\n      tagName: \"header\",\n      classList: [\n        styles.header,\n        utilitiesStyles.container,\n        utilitiesStyles.flex,\n        utilitiesStyles.alignCenter,\n        utilitiesStyles.justifyBetween,\n        utilitiesStyles.widthFull,\n      ],\n    });\n\n    const headerPrimary = this.createDOMElement({\n      tagName: \"h1\",\n      textContent: APP_NAME,\n      classList: [styles.headerPrimary],\n    });\n\n    header.append(headerPrimary);\n    return header;\n  }\n\n  private createSettingsWrapper(): HTMLDivElement {\n    return this.createDOMElement({\n      tagName: \"div\",\n      classList: [\n        utilitiesStyles.flex,\n        utilitiesStyles.center,\n        utilitiesStyles.gap30,\n        utilitiesStyles.marginInline10,\n        styles.icon,\n      ],\n    });\n  }\n\n  private createPagesWrapper(): HTMLDivElement {\n    return this.createDOMElement({\n      tagName: \"div\",\n      classList: [\n        utilitiesStyles.flex,\n        utilitiesStyles.center,\n        utilitiesStyles.gap30,\n      ],\n    });\n  }\n}\n","import { BaseComponent } from \"@/components/base-component.ts\";\nimport { EMPTY_STRING } from \"@/constants/constants.ts\";\n\nexport class BaseInput extends BaseComponent<\"input\"> {\n  private defaultValue = EMPTY_STRING;\n  constructor(value?: string) {\n    super();\n    if (value) {\n      this.element.value = value;\n    }\n  }\n\n  public get value(): string {\n    return this.element.value;\n  }\n\n  public set value(value: string) {\n    this.element.value = value;\n  }\n\n  public setDefaultValue(): void {\n    this.defaultValue = this.element.value;\n  }\n\n  public resetValue(): void {\n    this.element.value = this.defaultValue;\n  }\n\n  public toggleDisabled(): void {\n    this.element.disabled = !this.element.disabled;\n  }\n\n  protected createElement(): HTMLInputElement {\n    return this.createDOMElement({\n      tagName: \"input\",\n    });\n  }\n}\n","export const PLACEHOLDER = \"Car name\" as const;\nexport const INPUT_TYPES = {\n  TEXT: \"text\",\n  COLOR: \"color\",\n} as const;\nexport const INPUT_NAMES = {\n  CAR_NAME: \"name\",\n  CAR_COLOR: \"color\",\n};\n","import { BaseInput } from \"@/components/input/base-input.ts\";\nimport {\n  INPUT_NAMES,\n  INPUT_TYPES,\n  PLACEHOLDER,\n} from \"@/constants/input-constants.ts\";\nimport carStyles from \"@/components/cars/cars-list.module.css\";\n\nexport class CarNameInput extends BaseInput {\n  constructor(value?: string) {\n    super(value);\n    this.element.type = INPUT_TYPES.TEXT;\n    this.addClassList([carStyles.carName]);\n    this.element.placeholder = PLACEHOLDER;\n    this.element.name = INPUT_NAMES.CAR_NAME;\n    this.element.required = true;\n  }\n}\n","import { BaseInput } from \"@/components/input/base-input.ts\";\nimport { INPUT_NAMES, INPUT_TYPES } from \"@/constants/input-constants.ts\";\nimport carStyles from \"@/components/cars/cars-list.module.css\";\n\nexport class CarColorInput extends BaseInput {\n  constructor(value?: string) {\n    super(value);\n    this.element.type = INPUT_TYPES.COLOR;\n    this.addClassList([carStyles.carColor]);\n    this.element.name = INPUT_NAMES.CAR_COLOR;\n  }\n}\n","export const CAR_MODELS: Record<string, string[]> = {\n  Tesla: [\"Model X\", \"Model S\", \"Model 3\", \"Model Y\", \"Cybertruck\"],\n  BMW: [\"i3\", \"i4\", \"i8\", \"M4\", \"X5\"],\n  Audi: [\"A3\", \"A4\", \"Q7\", \"Q5\", \"e-tron\"],\n  Mercedes: [\"A-Class\", \"C-Class\", \"E-Class\", \"S-Class\", \"GLC\"],\n  Ford: [\"Mustang\", \"F-150\", \"Explorer\", \"Focus\", \"Bronco\"],\n  Toyota: [\"Camry\", \"Corolla\", \"Highlander\", \"RAV4\", \"Prius\"],\n  Honda: [\"Civic\", \"Accord\", \"CR-V\", \"Pilot\", \"Odyssey\"],\n  Chevrolet: [\"Malibu\", \"Impala\", \"Tahoe\", \"Silverado\", \"Bolt EV\"],\n  Volkswagen: [\"Golf\", \"Passat\", \"Tiguan\", \"ID.4\", \"Beetle\"],\n  Nissan: [\"Altima\", \"Maxima\", \"370Z\", \"Leaf\", \"Rogue\"],\n  Hyundai: [\"Elantra\", \"Sonata\", \"Tucson\", \"Santa Fe\", \"Kona\"],\n} as const;\n\nexport const CAR_BRANDS = Object.keys(CAR_MODELS);\n","import { COLOR, SYMBOLS, ZERO } from \"@/constants/constants.ts\";\nimport { CAR_BRANDS, CAR_MODELS } from \"@/constants/cars-model.ts\";\n\nfunction getColorValue(): string {\n  return Math.floor(Math.random() * COLOR.RANGE)\n    .toString(COLOR.HEX_BASE)\n    .padStart(COLOR.HEX_LENGTH, COLOR.ZERO_PAD);\n}\n\nexport function getRandomHEX(): string {\n  let hexString = `${SYMBOLS.HASH}`;\n  for (let index = ZERO; index < COLOR.RGB.length; index++) {\n    hexString += getColorValue();\n  }\n  return hexString;\n}\n\nexport function getRandomCarName(): string {\n  const carBrandIndex = Math.floor(\n    Math.random() * Object.keys(CAR_MODELS).length,\n  );\n  const carBrand = CAR_BRANDS[carBrandIndex];\n  const carModelIndex = Math.floor(Math.random() * CAR_MODELS[carBrand].length);\n  const carModel = CAR_MODELS[carBrand][carModelIndex];\n  return `${carBrand} ${carModel}`;\n}\n\nexport function errorHandler(error: unknown): void {\n  if (error instanceof Error) {\n    console.warn(error.message);\n    return;\n  }\n  if (error instanceof Response) {\n    console.warn(error.statusText);\n    return;\n  }\n  if (error instanceof DOMException) {\n    console.info(error.message);\n    return;\n  }\n  console.warn(error);\n}\n","export enum StorageKeys {\n  sort = \"sort\",\n  isASC = \"isASC\",\n  garage = \"Garage\",\n  winners = \"Winners\",\n  carProperties = \"CarProperties\",\n}\n","import type {\n  FullData,\n  ResponseCarData,\n  ResponseData,\n  ResponseWinnerData,\n  Sort,\n  Winner,\n} from \"@/types/api-service-types.ts\";\nimport type { Car, CarProperties, ModalData } from \"@/types/index.ts\";\nimport type { RaceData } from \"@/types/race-service-types.ts\";\n\nexport enum TypeNames {\n  object = \"object\",\n  string = \"string\",\n  number = \"number\",\n  positiveNumber = \"positiveNumber\",\n  boolean = \"boolean\",\n  responseCarData = \"responseCarData\",\n  responseWinnerData = \"responseWinnerData\",\n  responseData = \"responseData\",\n  raceData = \"raceData\",\n  carArray = \"carArray\",\n  winnerArray = \"winnerArray\",\n  car = \"car\",\n  winner = \"winner\",\n  carProperties = \"carProperties\",\n  modalData = \"modalData\",\n  sort = \"sort\",\n  fullData = \"fullData\",\n}\n\nexport interface TypesForValidator {\n  [TypeNames.object]: object;\n  [TypeNames.string]: string;\n  [TypeNames.number]: number;\n  [TypeNames.positiveNumber]: number;\n  [TypeNames.boolean]: boolean;\n  [TypeNames.responseCarData]: ResponseCarData;\n  [TypeNames.responseWinnerData]: ResponseWinnerData;\n  [TypeNames.responseData]: ResponseData;\n  [TypeNames.raceData]: RaceData;\n  [TypeNames.carArray]: Car[];\n  [TypeNames.winnerArray]: Winner[];\n  [TypeNames.car]: Car;\n  [TypeNames.winner]: Winner;\n  [TypeNames.carProperties]: CarProperties;\n  [TypeNames.modalData]: ModalData;\n  [TypeNames.sort]: Sort;\n  [TypeNames.fullData]: FullData[];\n}\n","import { BaseComponent } from \"@/components/base-component.ts\";\nimport carStyles from \"@/components/cars/cars-list.module.css\";\nimport utilitiesStyles from \"@/styles/utilities.module.css\";\nimport { IconButton } from \"@/components/buttons/icon-button.ts\";\nimport { BUTTON_TEXT, ICON_PATH } from \"@/constants/buttons-constants.ts\";\nimport type { Car, CarProperties } from \"@/types\";\nimport { CarNameInput } from \"@/components/input/car-name-input.ts\";\nimport { CarColorInput } from \"@/components/input/car-color-input.ts\";\nimport { INPUT_NAMES } from \"@/constants/input-constants.ts\";\nimport { MESSAGES } from \"@/constants/constants.ts\";\nimport { getRandomHEX } from \"@/utilities/utilities.ts\";\nimport { ServiceName } from \"@/types/di-container-types.ts\";\nimport { DIContainer } from \"@/services/di-container.ts\";\nimport type { FormButtonsConfig } from \"@/types/button-types.ts\";\nimport { StorageKeys } from \"@/types/session-storage-types.ts\";\nimport { TypeNames } from \"@/types/validator-types.ts\";\n\nexport abstract class BaseForm extends BaseComponent<\"form\", number> {\n  protected readonly nameElement;\n  protected colorElement;\n  protected apiService = DIContainer.getInstance().getService(\n    ServiceName.GARAGE,\n  );\n  protected validator = DIContainer.getInstance().getService(\n    ServiceName.VALIDATOR,\n  );\n  protected constructor(value?: Car) {\n    super(value?.id);\n    const storage = DIContainer.getInstance().getService(ServiceName.STORAGE);\n\n    const carProperties = storage.load(\n      StorageKeys.carProperties,\n      TypeNames.carProperties,\n    );\n    this.nameElement = this.addCarName(value?.name ?? carProperties?.name);\n    const color = value?.color ?? carProperties?.color ?? getRandomHEX();\n    this.colorElement = new CarColorInput(color);\n    this.appendElement(\n      this.colorElement.getElement(),\n      this.nameElement.getElement(),\n    );\n  }\n\n  protected static createButton(buttonText: FormButtonsConfig): IconButton {\n    return new IconButton({\n      title: BUTTON_TEXT[buttonText],\n      path: ICON_PATH[buttonText],\n      classList: [carStyles.formButton],\n    });\n  }\n\n  protected createElement(id: number): HTMLFormElement {\n    const form = this.createDOMElement({\n      tagName: \"form\",\n      classList: [carStyles.form],\n    });\n    this.addClassList(\n      [\n        utilitiesStyles.flex,\n        utilitiesStyles.gap10,\n        utilitiesStyles.alignCenter,\n      ],\n      form,\n    );\n    form.addEventListener(\"submit\", (event) => this.formHandler(event, id));\n    return form;\n  }\n\n  protected getFormData(): CarProperties {\n    const formData = new FormData(this.element);\n    const name = formData.get(INPUT_NAMES.CAR_NAME);\n    const color = formData.get(INPUT_NAMES.CAR_COLOR);\n    if (\n      !this.validator.validate(TypeNames.string, name) ||\n      !this.validator.validate(TypeNames.string, color)\n    ) {\n      throw new TypeError(MESSAGES.INVALID_DATA);\n    }\n    return { name, color };\n  }\n\n  private addCarName(value?: string): CarNameInput {\n    const carNameInput = new CarNameInput(value);\n    this.appendElement(carNameInput.getElement());\n    return carNameInput;\n  }\n\n  protected abstract formHandler(event: SubmitEvent, id?: number): void;\n}\n","export type Callback = (data?: unknown) => void | Promise<void>;\n\nexport interface ButtonOptions {\n  title: string;\n  path?: string;\n  classList?: string[];\n}\n\nexport enum ControlsButtonConfig {\n  EDIT = \"EDIT\",\n  DELETE = \"DELETE\",\n  START_ENGINE = \"START_ENGINE\",\n  STOP_ENGINE = \"STOP_ENGINE\",\n}\n\nexport enum PaginationButtonConfig {\n  NEXT = \"NEXT\",\n  PREVIOUS = \"PREVIOUS\",\n  FIRST = \"FIRST\",\n  LAST = \"LAST\",\n}\n\nexport enum FormButtonsConfig {\n  CROSS = \"CROSS\",\n  CONFIRM = \"CONFIRM\",\n}\n\nexport enum RaceButtonConfig {\n  START_RACE = \"START_RACE\",\n  RESET = \"RESET\",\n  GENERATE_CARS = \"GENERATE_CARS\",\n}\n","import { BUTTON_TYPES } from \"@/constants/buttons-constants.ts\";\nimport type { Car } from \"@/types\";\nimport type { BaseButton } from \"@/components/buttons/base-button.ts\";\nimport { BaseForm } from \"@/components/car-form/base-form.ts\";\nimport { FormButtonsConfig } from \"@/types/button-types.ts\";\nimport { errorHandler } from \"@/utilities/utilities.ts\";\nimport { ActionType } from \"@/types/event-emitter-types.ts\";\nimport { DIContainer } from \"@/services/di-container.ts\";\nimport { ServiceName } from \"@/types/di-container-types.ts\";\n\nexport class UpdateForm extends BaseForm {\n  private formButtons: BaseButton[] = [];\n  private formButtonsConfig = FormButtonsConfig;\n  private eventEmitter = DIContainer.getInstance().getService(\n    ServiceName.EVENT_EMITTER,\n  );\n  private readonly id;\n  constructor(value: Car) {\n    super(value);\n    this.addFormButtons();\n    this.id = value.id;\n    this.colorElement.getElement().addEventListener(\"change\", () => {\n      this.eventEmitter.notify({\n        type: ActionType.updateCar,\n        data: {\n          id: this.id,\n          name: this.nameElement.value,\n          color: this.colorElement.value,\n        },\n      });\n    });\n  }\n\n  public editHandler(): void {\n    if (this.getUpdateState()) {\n      this.toggleUpdateState();\n      this.nameElement.getElement().focus();\n      this.colorElement.setDefaultValue();\n      this.nameElement.setDefaultValue();\n    }\n  }\n\n  protected formHandler(event: Event, id: number): void {\n    event.preventDefault();\n    let formData;\n    try {\n      formData = this.getFormData();\n    } catch (error) {\n      errorHandler(error);\n      this.resetForm();\n      return;\n    }\n    this.toggleUpdateState();\n    this.apiService.updateCar({ id, ...formData }).catch((error) => {\n      errorHandler(error);\n      this.resetForm();\n    });\n  }\n\n  private getUpdateState(): boolean {\n    return this.nameElement.getElement().disabled;\n  }\n\n  private toggleUpdateState(): void {\n    this.nameElement.toggleDisabled();\n    this.colorElement.toggleDisabled();\n    for (const button of this.formButtons) {\n      button.toggleDisabled();\n    }\n  }\n\n  private addFormButtons(): void {\n    this.createFormButtons();\n    const [closeButton, confirmButton] = this.formButtons;\n    closeButton.addListener(() => {\n      this.resetForm();\n      this.toggleUpdateState();\n    });\n    this.appendElement(confirmButton.getElement(), closeButton.getElement());\n\n    this.toggleUpdateState();\n  }\n\n  private resetForm(): void {\n    this.colorElement.resetValue();\n    this.nameElement.resetValue();\n    this.eventEmitter.notify({\n      type: ActionType.updateCar,\n      data: {\n        id: this.id,\n        name: this.nameElement.value,\n        color: this.colorElement.value,\n      },\n    });\n  }\n\n  private createFormButtons(): void {\n    for (const buttonText of Object.values(this.formButtonsConfig)) {\n      const button = BaseForm.createButton(buttonText);\n      if (buttonText === FormButtonsConfig.CONFIRM) {\n        button.getElement().type = BUTTON_TYPES.SUBMIT;\n      }\n      this.formButtons.push(button);\n    }\n  }\n}\n","import { BaseComponent } from \"@/components/base-component.ts\";\nimport type { BaseButton } from \"@/components/buttons/base-button.ts\";\nimport { BUTTON_TEXT, ICON_PATH } from \"@/constants/buttons-constants.ts\";\nimport { IconButton } from \"@/components/buttons/icon-button.ts\";\nimport carStyles from \"@/components/cars/cars-list.module.css\";\nimport type { Car, CarProperties } from \"@/types\";\nimport utilitiesStyles from \"@/styles/utilities.module.css\";\nimport { UpdateForm } from \"@/components/car-form/update-form.ts\";\nimport type { Callback } from \"@/types/button-types.ts\";\nimport { ControlsButtonConfig } from \"@/types/button-types.ts\";\nimport { ActionType } from \"@/types/event-emitter-types.ts\";\nimport { DIContainer } from \"@/services/di-container.ts\";\nimport { ServiceName } from \"@/types/di-container-types.ts\";\nimport { errorHandler } from \"@/utilities/utilities.ts\";\nimport { ATTRIBUTES, ERROR_MESSAGES } from \"@/constants/constants.ts\";\nimport { TypeNames } from \"@/types/validator-types.ts\";\n\nexport class CarItem extends BaseComponent<\"li\"> {\n  private controlsButtons: Record<string, BaseButton> = {};\n  private readonly buttonsConfig: {\n    title: ControlsButtonConfig;\n    callback: Callback;\n    action: (button: IconButton) => void;\n  }[] = [\n    {\n      title: ControlsButtonConfig.DELETE,\n      callback: async (): Promise<void> => {\n        await this.garageService.deleteCar(this.id).catch(errorHandler);\n        this.eventEmitter.notify({\n          type: ActionType.listUpdated,\n          data: [null],\n        });\n      },\n      action: (button: IconButton): void => button.addRaceListeners(this.id),\n    },\n    {\n      title: ControlsButtonConfig.EDIT,\n      callback: (): void => {\n        this.form.editHandler();\n      },\n      action: (button: IconButton): void => button.addRaceListeners(this.id),\n    },\n    {\n      title: ControlsButtonConfig.START_ENGINE,\n      callback: (): void => {\n        this.raceService.startSingleRace(this.id).catch(errorHandler);\n      },\n      action: (button: IconButton): void => {\n        button.addRaceListeners(this.id, true);\n      },\n    },\n    {\n      title: ControlsButtonConfig.STOP_ENGINE,\n      callback: (): void => {\n        this.raceService.stopSingleRace(this.id).catch(errorHandler);\n      },\n      action: (button: IconButton): void => this.registerStopButton(button),\n    },\n  ];\n  private readonly form;\n  private readonly useElement;\n  private readonly carElement;\n  private readonly garageService;\n  private readonly raceService;\n  private readonly eventEmitter;\n  private readonly id;\n\n  constructor(value: Car) {\n    super();\n    const diContainer = DIContainer.getInstance();\n    const validator = diContainer.getService(ServiceName.VALIDATOR);\n    this.registerEvent(ActionType.updateCar, (data) => {\n      if (!validator.validate(TypeNames.car, data)) {\n        throw new Error(ERROR_MESSAGES.INVALID_DATA);\n      }\n      if (data.id === value.id) {\n        this.updateCarView(data);\n      }\n    });\n    this.raceService = diContainer.getService(ServiceName.RACE);\n    this.garageService = diContainer.getService(ServiceName.GARAGE);\n    this.eventEmitter = diContainer.getService(ServiceName.EVENT_EMITTER);\n    this.form = new UpdateForm(value);\n    this.id = value.id;\n    this.element.append(this.createCarPanel());\n    const { use, svg } = this.createSVG({\n      classList: [carStyles.carIcon],\n      path: ICON_PATH.CAR,\n    });\n    this.useElement = use;\n    this.carElement = svg;\n    this.appendElement(this.carElement);\n\n    this.updateCarView(value);\n  }\n\n  public getCarElement(): SVGElement {\n    return this.carElement;\n  }\n\n  public updateCarView(value: CarProperties): void {\n    const carUse = this.useElement;\n    if (!carUse) {\n      return;\n    }\n    carUse.setAttribute(ATTRIBUTES.FILL, value.color);\n  }\n\n  protected createElement(): HTMLLIElement {\n    return this.createDOMElement({\n      tagName: \"li\",\n      classList: [\n        utilitiesStyles.flex,\n        utilitiesStyles.flexColumn,\n        utilitiesStyles.gap10,\n      ],\n    });\n  }\n\n  private createCarPanel(): HTMLDivElement {\n    const carPanel = this.createDOMElement({\n      tagName: \"div\",\n      classList: [\n        utilitiesStyles.flex,\n        utilitiesStyles.justifyBetween,\n        utilitiesStyles.alignCenter,\n        carStyles.carPanel,\n      ],\n    });\n    carPanel.append(this.form.getElement(), this.addControlsButtons());\n    return carPanel;\n  }\n\n  private createButtonWrapper(): HTMLDivElement {\n    return this.createDOMElement({\n      tagName: \"div\",\n      classList: [\n        utilitiesStyles.flex,\n        utilitiesStyles.alignCenter,\n        utilitiesStyles.gap10,\n      ],\n    });\n  }\n\n  private addControlsButtons(): HTMLDivElement {\n    const buttonWrapper = this.createButtonWrapper();\n    for (const { title, callback, action } of this.buttonsConfig) {\n      const button = new IconButton(\n        {\n          title: BUTTON_TEXT[title],\n          path: ICON_PATH[title],\n          classList: [carStyles.icon],\n        },\n        callback,\n      );\n      this.appendElement(button.getElement());\n      this.controlsButtons[title] = button;\n      buttonWrapper.append(button.getElement());\n      action(button);\n    }\n    return buttonWrapper;\n  }\n\n  private registerStopButton(button: IconButton): void {\n    button.registerEvent(ActionType.singleRaceStarted, (eventID) => {\n      if (eventID === this.id) {\n        button.disabledElement(false);\n      }\n    });\n\n    button.registerEvent(ActionType.raceEnded, () => {\n      button.disabledElement(true);\n    });\n    button.registerEvent(ActionType.singleRaceEnded, (eventID) => {\n      if (eventID === this.id) {\n        button.disabledElement(true);\n      }\n    });\n    button.addListener(() => button.disabledElement(true));\n    button.disabledElement(true);\n  }\n}\n","import type { AddCarsList, Car } from \"@/types\";\nimport { BaseComponent } from \"@/components/base-component.ts\";\nimport carStyles from \"@/components/cars/cars-list.module.css\";\nimport { CarItem } from \"@/components/cars/car-item.ts\";\nimport utilitiesStyles from \"@/styles/utilities.module.css\";\nimport { DIContainer } from \"@/services/di-container.ts\";\nimport { ServiceName } from \"@/types/di-container-types.ts\";\nimport { ActionType } from \"@/types/event-emitter-types.ts\";\nimport { TypeNames } from \"@/types/validator-types.ts\";\n\nexport class CarsList extends BaseComponent<\"ul\"> {\n  private readonly raceService;\n  constructor() {\n    super();\n    const diContainer = DIContainer.getInstance();\n    this.raceService = diContainer.getService(ServiceName.RACE);\n    this.raceService.init(this.element);\n    const validator = diContainer.getService(ServiceName.VALIDATOR);\n    this.registerEvent(ActionType.paginationUpdated, (data: unknown) => {\n      if (validator.validate(TypeNames.carArray, data)) {\n        this.addCarsList(data);\n      }\n    });\n  }\n\n  public addCar(carData: Car): void {\n    const carItem = new CarItem(carData);\n    this.appendElement(carItem.getElement());\n    this.raceService.addCar(carData.id, carItem.getCarElement());\n  }\n\n  public addCarsList: AddCarsList = (list) => {\n    this.clearElement();\n    this.raceService?.resetCars();\n    for (const car of list) {\n      this.addCar(car);\n    }\n  };\n\n  protected createElement(): HTMLElementTagNameMap[\"ul\"] {\n    return this.createDOMElement({\n      tagName: \"ul\",\n      classList: [\n        carStyles.carsList,\n        utilitiesStyles.flex,\n        utilitiesStyles.flexColumn,\n        utilitiesStyles.gap20,\n      ],\n    });\n  }\n}\n","import { BaseForm } from \"@/components/car-form/base-form.ts\";\nimport { errorHandler, getRandomHEX } from \"@/utilities/utilities.ts\";\nimport { FormButtonsConfig } from \"@/types/button-types.ts\";\nimport { ActionType } from \"@/types/event-emitter-types.ts\";\nimport { DIContainer } from \"@/services/di-container.ts\";\nimport { ServiceName } from \"@/types/di-container-types.ts\";\nimport { StorageKeys } from \"@/types/session-storage-types.ts\";\n\nexport class CreateForm extends BaseForm {\n  constructor() {\n    super();\n    this.addFormButton();\n    const storage = DIContainer.getInstance().getService(ServiceName.STORAGE);\n    window.addEventListener(\"beforeunload\", () => {\n      storage.save(StorageKeys.carProperties, this.getFormData());\n    });\n    this.registerEvent(ActionType.changeRoute, () => {\n      storage.save(StorageKeys.carProperties, this.getFormData());\n    });\n  }\n\n  protected formHandler(event: Event): void {\n    event.preventDefault();\n    let formData;\n    try {\n      formData = this.getFormData();\n    } catch (error) {\n      errorHandler(error);\n      return;\n    }\n\n    this.apiService\n      .createCar(formData)\n      .then(() => {\n        this.nameElement.resetValue();\n        this.colorElement.value = getRandomHEX();\n        DIContainer.getInstance()\n          .getService(ServiceName.EVENT_EMITTER)\n          .notify({ type: ActionType.listUpdated, data: [null, true] });\n      })\n      .catch(errorHandler);\n  }\n\n  private addFormButton(): void {\n    const confirmButton = BaseForm.createButton(FormButtonsConfig.CONFIRM);\n    this.appendElement(confirmButton.getElement());\n    confirmButton.addRaceListeners();\n  }\n}\n","import { BaseComponent } from \"@/components/base-component.ts\";\nimport utilitiesStyles from \"@/styles/utilities.module.css\";\nimport type { BaseButton } from \"@/components/buttons/base-button.ts\";\nimport { type Callback } from \"@/types\";\nimport { IconButton } from \"@/components/buttons/icon-button.ts\";\nimport { BUTTON_TEXT, ICON_PATH } from \"@/constants/buttons-constants.ts\";\nimport carStyles from \"@/components/cars/cars-list.module.css\";\nimport { ONE, SYMBOLS, ZERO } from \"@/constants/constants.ts\";\nimport { PaginationButtonConfig } from \"@/types/button-types.ts\";\nimport { ActionType } from \"@/types/event-emitter-types.ts\";\nimport type {\n  ResponseCarData,\n  ResponseWinnerData,\n} from \"@/types/api-service-types.ts\";\nimport { DIContainer } from \"@/services/di-container.ts\";\nimport { ServiceName } from \"@/types/di-container-types.ts\";\nimport { errorHandler } from \"@/utilities/utilities.ts\";\nimport { TypeNames } from \"@/types/validator-types.ts\";\nimport type { EventEmitter } from \"@/services/event-emitter.ts\";\nimport type { WinnerService } from \"@/services/api/winner-service.ts\";\nimport type { GarageService } from \"@/services/api/garage-service.ts\";\n\nexport abstract class BasePagination<\n  T extends WinnerService | GarageService,\n  D extends ResponseWinnerData | ResponseCarData,\n> extends BaseComponent<\"div\"> {\n  protected currentPage: number;\n  private buttons: Record<string, BaseButton> = {};\n  private buttonsConfig: {\n    name: PaginationButtonConfig;\n    callback: Callback;\n  }[] = [\n    {\n      name: PaginationButtonConfig.FIRST,\n      callback: (): void => {\n        this.setPage(ONE).catch(errorHandler);\n      },\n    },\n    {\n      name: PaginationButtonConfig.PREVIOUS,\n      callback: (): void => {\n        let newPage = this.currentPage - ONE;\n        newPage = newPage <= ZERO ? ONE : newPage;\n        this.setPage(newPage).catch(errorHandler);\n      },\n    },\n    {\n      name: PaginationButtonConfig.NEXT,\n      callback: (): void => {\n        let newPage = this.currentPage + ONE;\n        newPage = Math.min(newPage, this.lastPage);\n        this.setPage(newPage).catch(errorHandler);\n      },\n    },\n    {\n      name: PaginationButtonConfig.LAST,\n      callback: (): void => {\n        this.setPage(this.lastPage).catch(errorHandler);\n      },\n    },\n  ];\n  private readonly currentPageElement: HTMLParagraphElement;\n  private readonly counterElement: HTMLSpanElement;\n  private lastPage: number;\n  protected abstract limit: number;\n  protected abstract eventEmitter: EventEmitter;\n  protected abstract apiHandler: T;\n\n  protected constructor(pageName: string) {\n    super();\n    const storage = DIContainer.getInstance().getService(ServiceName.STORAGE);\n\n    const currentPage = Number(\n      storage.load(pageName, TypeNames.positiveNumber),\n    );\n    this.currentPage = currentPage || ONE;\n\n    window.addEventListener(\"beforeunload\", () => {\n      storage.save(pageName, this.currentPage);\n    });\n    this.registerEvent(ActionType.changeRoute, () => {\n      storage.save(pageName, this.currentPage);\n    });\n\n    this.counterElement = this.createDOMElement({\n      tagName: \"span\",\n      textContent: String(ONE),\n    });\n    this.currentPageElement = this.createDOMElement({\n      tagName: \"p\",\n    });\n    this.addPagination();\n    this.addPageName(pageName);\n    this.lastPage = this.currentPage || ONE;\n  }\n\n  public async setPage(\n    newPage: number | null,\n    isCreate?: boolean,\n  ): Promise<void> {\n    if (newPage === this.currentPage) {\n      return;\n    }\n    this.currentPage = newPage || this.currentPage;\n    this.setPageNumber();\n    const data = await this.getPaginationData();\n    this.setElementsCount(data.count);\n    const oldLastPage = this.lastPage;\n    this.setLastPage(data.count);\n    if (this.currentPage > this.lastPage) {\n      this.currentPage = this.lastPage + ONE;\n    }\n    if (data.data.length === ZERO && this.currentPage > ONE) {\n      await this.setPage(this.currentPage - ONE);\n      return;\n    }\n    this.updateButtonsState();\n    if (isCreate && this.currentPage !== oldLastPage) {\n      return;\n    }\n    this.eventEmitter.notify({\n      type: ActionType.paginationUpdated,\n      data: data.data,\n    });\n  }\n\n  protected createElement(): HTMLElementTagNameMap[\"div\"] {\n    return this.createDOMElement({\n      tagName: \"div\",\n      classList: [\n        utilitiesStyles.flex,\n        utilitiesStyles.gap30,\n        utilitiesStyles.alignCenter,\n      ],\n    });\n  }\n\n  private updateButtonsState(): void {\n    const isFirstPage = this.currentPage === ONE;\n    const isLastPage = this.currentPage === this.lastPage;\n\n    this.buttons[PaginationButtonConfig.FIRST].disabledElement(isFirstPage);\n    this.buttons[PaginationButtonConfig.PREVIOUS].disabledElement(isFirstPage);\n    this.buttons[PaginationButtonConfig.NEXT].disabledElement(isLastPage);\n    this.buttons[PaginationButtonConfig.LAST].disabledElement(isLastPage);\n  }\n\n  private setLastPage(elementsCount: number): void {\n    this.lastPage = Math.ceil(elementsCount / this.limit) || ONE;\n  }\n\n  private setPageNumber(): void {\n    this.currentPageElement.textContent = String(this.currentPage);\n  }\n\n  private setElementsCount(elementsCount: number): void {\n    this.counterElement.textContent = String(elementsCount);\n  }\n\n  private addPagination(): void {\n    const pagination = this.createDOMElement({\n      tagName: \"div\",\n      classList: [\n        utilitiesStyles.flex,\n        utilitiesStyles.justifyBetween,\n        utilitiesStyles.alignCenter,\n      ],\n    });\n    this.createPaginationButtons();\n    pagination.append(\n      this.buttons[PaginationButtonConfig.FIRST].getElement(),\n      this.buttons[PaginationButtonConfig.PREVIOUS].getElement(),\n      this.currentPageElement,\n      this.buttons[PaginationButtonConfig.NEXT].getElement(),\n      this.buttons[PaginationButtonConfig.LAST].getElement(),\n    );\n    this.appendElement(pagination);\n  }\n\n  private createPaginationButtons(): void {\n    for (const config of this.buttonsConfig) {\n      const button = new IconButton(\n        {\n          title: BUTTON_TEXT[config.name],\n          path: ICON_PATH[config.name],\n          classList: [carStyles.icon],\n        },\n        config.callback,\n      );\n      this.buttons[config.name] = button;\n      button.addRaceListeners();\n    }\n  }\n\n  private addPageName(pageName: string): void {\n    const pageNameElement = this.createDOMElement({\n      tagName: \"p\",\n      textContent: pageName,\n    });\n    const openBracket = document.createTextNode(SYMBOLS.BRACKET.OPEN);\n    const closeBracket = document.createTextNode(SYMBOLS.BRACKET.CLOSE);\n    pageNameElement.append(openBracket, this.counterElement, closeBracket);\n    this.appendElement(pageNameElement);\n  }\n\n  protected abstract getPaginationData(): Promise<D>;\n}\n","import type { ResponseCarData } from \"@/types/api-service-types.ts\";\nimport { ActionType } from \"@/types/event-emitter-types.ts\";\nimport { BasePagination } from \"@/components/pagination/base-pagination.ts\";\nimport { ServiceName } from \"@/types/di-container-types.ts\";\nimport { DIContainer } from \"@/services/di-container.ts\";\nimport {\n  CARS_PER_PAGE,\n  ERROR_MESSAGES,\n  PAGE_NAME,\n} from \"@/constants/constants.ts\";\nimport { errorHandler } from \"@/utilities/utilities.ts\";\nimport { TypeNames } from \"@/types/validator-types.ts\";\nimport type { GarageService } from \"@/services/api/garage-service.ts\";\n\nexport class GaragePagination extends BasePagination<\n  GarageService,\n  ResponseCarData\n> {\n  protected limit;\n  protected eventEmitter;\n  protected apiHandler;\n  private validator = DIContainer.getInstance().getService(\n    ServiceName.VALIDATOR,\n  );\n  constructor() {\n    super(PAGE_NAME.GARAGE);\n    const diContainer = DIContainer.getInstance();\n    this.eventEmitter = diContainer.getService(ServiceName.EVENT_EMITTER);\n    this.apiHandler = diContainer.getService(ServiceName.GARAGE);\n    this.limit = CARS_PER_PAGE;\n\n    this.registerEvent(ActionType.listUpdated, async (data) => {\n      if (!Array.isArray(data)) {\n        return;\n      }\n      const [newPage, isCreate] = data;\n      if (\n        (this.validator.validate(TypeNames.number, newPage) ||\n          newPage === null) &&\n        (this.validator.validate(TypeNames.boolean, isCreate) ||\n          isCreate === undefined)\n      ) {\n        await this.setPage(newPage, isCreate).catch(errorHandler);\n      }\n    });\n\n    this.setPage(null).catch(errorHandler);\n  }\n\n  protected async getPaginationData(): Promise<ResponseCarData> {\n    let data;\n    try {\n      data = await this.apiHandler.getPage({\n        page: this.currentPage,\n        limit: this.limit,\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n    if (!data) {\n      throw new Error(ERROR_MESSAGES.INVALID_DATA);\n    }\n    return data;\n  }\n}\n","import { BaseComponent } from \"@/components/base-component.ts\";\nimport utilitiesStyles from \"@/styles/utilities.module.css\";\nimport { BUTTON_TEXT, ICON_PATH } from \"@/constants/buttons-constants.ts\";\nimport styles from \"@/pages/home/home.module.css\";\nimport { CarsList } from \"@/components/cars/cars-list.ts\";\nimport { CreateForm } from \"@/components/car-form/create-form.ts\";\nimport { CARS_COUNT, ZERO } from \"@/constants/constants.ts\";\nimport {\n  errorHandler,\n  getRandomCarName,\n  getRandomHEX,\n} from \"@/utilities/utilities.ts\";\nimport { IconButton } from \"@/components/buttons/icon-button.ts\";\nimport { DIContainer } from \"@/services/di-container.ts\";\nimport { ServiceName } from \"@/types/di-container-types.ts\";\nimport type { Callback } from \"@/types/button-types.ts\";\nimport { RaceButtonConfig } from \"@/types/button-types.ts\";\nimport { ActionType } from \"@/types/event-emitter-types.ts\";\nimport { GaragePagination } from \"@/components/pagination/garage-pagination.ts\";\n\nexport class Home extends BaseComponent<\"div\"> {\n  private readonly buttonsConfig: {\n    title: RaceButtonConfig;\n    callback: Callback;\n  }[] = [\n    {\n      title: RaceButtonConfig.START_RACE,\n      callback: (): void => {\n        this.raceService.startRace().catch(errorHandler);\n      },\n    },\n    {\n      title: RaceButtonConfig.RESET,\n      callback: (): void => {\n        this.raceService.stopRace().catch(errorHandler);\n      },\n    },\n    {\n      title: RaceButtonConfig.GENERATE_CARS,\n      callback: (): void => {\n        this.generateCars().catch(errorHandler);\n      },\n    },\n  ];\n  private readonly garageService;\n  private readonly pagination;\n  private readonly raceService;\n  constructor() {\n    super();\n    const carsList = new CarsList();\n    const diContainer = DIContainer.getInstance();\n    this.raceService = diContainer.getService(ServiceName.RACE);\n    this.garageService = diContainer.getService(ServiceName.GARAGE);\n    this.pagination = new GaragePagination();\n    this.appendElement(\n      this.pagination.getElement(),\n      this.createUIPanel(),\n      carsList.getElement(),\n    );\n  }\n\n  protected createElement(): HTMLDivElement {\n    return this.createDOMElement({\n      tagName: \"div\",\n      classList: [\n        utilitiesStyles.container,\n        utilitiesStyles.flex,\n        utilitiesStyles.gap30,\n        utilitiesStyles.flexColumn,\n        utilitiesStyles.alignCenter,\n      ],\n    });\n  }\n\n  private addButtons(buttonWrapper: HTMLDivElement): void {\n    for (const { title, callback } of this.buttonsConfig) {\n      let button;\n      button = new IconButton(\n        {\n          title: BUTTON_TEXT[title],\n          path: ICON_PATH[title],\n          classList: [],\n        },\n        callback,\n      );\n      if (title === RaceButtonConfig.RESET) {\n        button.registerEvent(ActionType.enginesStarted, () => {\n          button.disabledElement(false);\n        });\n        button.registerEvent(ActionType.singleRaceStarted, () => {\n          button.disabledElement(false);\n        });\n        button.registerEvent(ActionType.raceEnded, () => {\n          button.disabledElement(true);\n        });\n        button.disabledElement(true);\n        button.addListener((): void => button.disabledElement(true));\n      } else {\n        button.addRaceListeners();\n      }\n\n      buttonWrapper.append(button.getElement());\n    }\n  }\n\n  private createUIPanel(): HTMLDivElement {\n    const uiPanel = this.createDOMElement({\n      tagName: \"div\",\n      classList: [\n        utilitiesStyles.flex,\n        utilitiesStyles.justifyBetween,\n        utilitiesStyles.alignCenter,\n        utilitiesStyles.widthFull,\n          styles.uiPanel,\n      ],\n    });\n    const createForm = new CreateForm();\n    uiPanel.append(createForm.getElement(), this.createButtonWrapper());\n    return uiPanel;\n  }\n\n  private createButtonWrapper(): HTMLDivElement {\n    const buttonWrapper = this.createDOMElement({\n      tagName: \"div\",\n      classList: [\n        styles.buttonWrapper,\n        utilitiesStyles.flex,\n        utilitiesStyles.alignCenter,\n        utilitiesStyles.gap20,\n      ],\n    });\n    this.addButtons(buttonWrapper);\n    return buttonWrapper;\n  }\n\n  private async generateCars(): Promise<void> {\n    const requests: Promise<unknown>[] = [];\n    for (let index = ZERO; index < CARS_COUNT; index++) {\n      const name = getRandomCarName();\n      const color = getRandomHEX();\n      const request = this.garageService\n        .createCar({\n          name,\n          color,\n        })\n        .catch(errorHandler);\n      requests.push(request);\n    }\n    await Promise.all(requests);\n    void this.pagination.setPage(null, true);\n  }\n}\n","import { BaseComponent } from \"@/components/base-component.ts\";\nimport utilitiesStyles from \"@/styles/utilities.module.css\";\nimport { TextButton } from \"@/components/buttons/text-button.ts\";\nimport { MESSAGES, PAGE_PATH } from \"@/constants/constants.ts\";\nimport { BUTTON_TEXT } from \"@/constants/buttons-constants.ts\";\nimport { ServiceName } from \"@/types/di-container-types.ts\";\nimport { DIContainer } from \"@/services/di-container.ts\";\n\nexport class NotFound extends BaseComponent<\"div\"> {\n  private homeButton: TextButton;\n  constructor() {\n    super();\n    this.homeButton = new TextButton(BUTTON_TEXT.TO_GARAGE, () =>\n      DIContainer.getInstance()\n        .getService<ServiceName.ROUTER>(ServiceName.ROUTER)\n        .navigateTo(PAGE_PATH.HOME),\n    );\n    this.appendElement(this.homeButton.getElement());\n  }\n\n  protected createElement(): HTMLDivElement {\n    const main = this.createDOMElement({\n      tagName: \"div\",\n      classList: [\n        utilitiesStyles.flex,\n        utilitiesStyles.container,\n        utilitiesStyles.flexColumn,\n        utilitiesStyles.center,\n        utilitiesStyles.gap30,\n      ],\n    });\n\n    const text = this.createDOMElement({\n      tagName: \"p\",\n      textContent: MESSAGES.PAGE_NOT_FOUND,\n    });\n\n    main.append(text);\n    return main;\n  }\n}\n","import type { ResponseWinnerData } from \"@/types/api-service-types.ts\";\nimport type { Order, Sort } from \"@/types/api-service-types.ts\";\nimport { BasePagination } from \"@/components/pagination/base-pagination.ts\";\nimport { ServiceName } from \"@/types/di-container-types.ts\";\nimport { DIContainer } from \"@/services/di-container.ts\";\nimport { PAGE_NAME, WINNERS_PER_PAGE } from \"@/constants/constants.ts\";\nimport { errorHandler } from \"@/utilities/utilities.ts\";\nimport type { WinnerService } from \"@/services/api/winner-service.ts\";\n\nexport class WinnerPagination extends BasePagination<\n  WinnerService,\n  ResponseWinnerData\n> {\n  protected limit;\n  protected order;\n  protected sort;\n  protected eventEmitter;\n  protected apiHandler;\n  constructor(order: Order, sort: Sort) {\n    super(PAGE_NAME.WINNERS);\n    const diContainer = DIContainer.getInstance();\n    this.eventEmitter = diContainer.getService(ServiceName.EVENT_EMITTER);\n    this.apiHandler = diContainer.getService(ServiceName.WINNER);\n    this.limit = WINNERS_PER_PAGE;\n    this.order = order;\n    this.sort = sort;\n    this.setPage(null).catch(errorHandler);\n  }\n\n  public setOrder(order: Order): void {\n    this.order = order;\n    this.setPage(null).catch(errorHandler);\n  }\n\n  public setSort(sort: Sort): void {\n    this.sort = sort;\n    this.setPage(null).catch(errorHandler);\n  }\n\n  protected getPaginationData(): Promise<ResponseWinnerData> {\n    return this.apiHandler.getPage({\n      page: this.currentPage,\n      limit: this.limit,\n      order: this.order,\n      sort: this.sort,\n    });\n  }\n}\n","import type { Car, CarProperties, SetPageCallback } from \"@/types/index.ts\";\nimport type { RaceData } from \"@/types/race-service-types.ts\";\n\nexport type DeleteData = (url: string) => Promise<void>;\n\nexport type UpdateCar = ({ id, ...properties }: Car) => Promise<void>;\n\nexport type CreateCar = (\n  properties: CarProperties,\n  callback?: SetPageCallback,\n) => Promise<unknown>;\n\nexport interface Winner {\n  id: number;\n  wins: number;\n  time: number;\n}\n\nexport enum REQUEST_METHOD {\n  POST = \"POST\",\n  PUT = \"PUT\",\n  DELETE = \"DELETE\",\n  PATCH = \"PATCH\",\n}\n\nexport type RequestEngine = (\n  status: EngineStatus,\n  carId: number,\n  signal?: AbortSignal,\n) => Promise<RaceData>;\n\nexport interface ResponseData {\n  data: unknown;\n  count: number;\n}\n\nexport type CombinedResponse<T> = (\n  url: string,\n  init?: RequestInit,\n) => Promise<T>;\n\nexport interface ResponseCarData extends ResponseData {\n  data: Car[];\n}\n\nexport interface ResponseWinnerData extends ResponseData {\n  data: Winner[];\n}\n\nexport type GetDataHandler = (url: string) => Promise<ResponseData>;\n\nexport interface PaginationParameters {\n  page: number;\n  limit: number;\n}\n\nexport interface SortedParameters {\n  sort: Sort;\n  order: Order;\n}\n\nexport interface SortedPaginationParameters\n  extends PaginationParameters,\n    SortedParameters {}\n\nexport type GetCarsHandler = (\n  parameters: PaginationParameters,\n) => Promise<ResponseCarData>;\n\nexport type GetWinnersHandler = (\n  parameters: SortedPaginationParameters,\n) => Promise<{\n  count: number;\n  data: FullData[];\n}>;\n\nexport enum Order {\n  ASC = \"ASC\",\n  DESC = \"DESC\",\n}\n\nexport enum Sort {\n  ID = \"id\",\n  WINS = \"wins\",\n  TIME = \"time\",\n}\n\nexport enum EngineStatus {\n  STARTED = \"started\",\n  STOPPED = \"stopped\",\n  DRIVE = \"drive\",\n}\n\nexport type CreateOrUpdateHandler = (\n  url: string,\n  data: unknown,\n  signal?: AbortSignal,\n) => Promise<unknown>;\n\nexport type SendData = (\n  url: string,\n  data: unknown,\n  method: REQUEST_METHOD,\n  signal?: AbortSignal,\n) => Promise<unknown>;\n\nexport interface FullData extends Winner, Car {}\n","import { BaseComponent } from \"@/components/base-component.ts\";\nimport utilitiesStyles from \"@/styles/utilities.module.css\";\nimport { WinnerPagination } from \"@/components/pagination/winner-pagination.ts\";\nimport styles from \"@/pages/winners/winners.module.css\";\nimport type { FullData } from \"@/types/api-service-types.ts\";\nimport { Order, Sort } from \"@/types/api-service-types.ts\";\nimport { IconButton } from \"@/components/buttons/icon-button.ts\";\nimport { BUTTON_TEXT, ICON_PATH } from \"@/constants/buttons-constants.ts\";\nimport { DIContainer } from \"@/services/di-container.ts\";\nimport { ServiceName } from \"@/types/di-container-types.ts\";\nimport { StorageKeys } from \"@/types/session-storage-types.ts\";\nimport {\n  ATTRIBUTES,\n  SUFFIXES,\n  TWO,\n  WINNERS_TABLE_HEADERS,\n} from \"@/constants/constants.ts\";\nimport carStyles from \"@/components/cars/cars-list.module.css\";\nimport { ActionType } from \"@/types/event-emitter-types.ts\";\nimport { TypeNames } from \"@/types/validator-types.ts\";\n\nexport class Winners extends BaseComponent<\"div\"> {\n  private pagination;\n  private isASC = false;\n  private readonly order;\n  private sort;\n  private tableWrapper = this.createDOMElement({\n    tagName: \"div\",\n  });\n  private validator = DIContainer.getInstance().getService(\n    ServiceName.VALIDATOR,\n  );\n\n  constructor() {\n    super();\n    const storage = DIContainer.getInstance().getService(ServiceName.STORAGE);\n    this.isASC = storage.load(StorageKeys.isASC, TypeNames.boolean) || false;\n    this.order = this.isASC ? Order.ASC : Order.DESC;\n    this.sort = storage.load(StorageKeys.sort, TypeNames.sort) || Sort.ID;\n\n    this.pagination = new WinnerPagination(this.order, this.sort);\n    this.appendElement(this.pagination.getElement());\n    this.appendElement(this.createUIPanel());\n\n    this.appendElement(this.tableWrapper);\n    window.addEventListener(\"beforeunload\", () => {\n      storage.save(StorageKeys.isASC, this.isASC);\n      storage.save(StorageKeys.sort, this.sort);\n    });\n    this.registerEvent(ActionType.changeRoute, () => {\n      storage.save(StorageKeys.isASC, this.isASC);\n      storage.save(StorageKeys.sort, this.sort);\n    });\n\n    this.registerEvent(ActionType.paginationUpdated, (data) => {\n      if (this.validator.validate(TypeNames.fullData, data)) {\n        this.tableWrapper.replaceChildren();\n        this.createWinnerTable(data);\n      }\n    });\n  }\n\n  protected createElement(): HTMLDivElement {\n    return this.createDOMElement({\n      tagName: \"div\",\n      classList: [\n        utilitiesStyles.container,\n        utilitiesStyles.flex,\n        utilitiesStyles.gap30,\n        utilitiesStyles.flexColumn,\n        utilitiesStyles.alignCenter,\n      ],\n    });\n  }\n\n  private createOrderButton(): IconButton {\n    const button = new IconButton(\n      {\n        title: BUTTON_TEXT.ORDER,\n        path: ICON_PATH.ORDER,\n        classList: [styles.orderIcon],\n      },\n      () => {\n        this.isASC = !this.isASC;\n        const order = this.isASC ? Order.ASC : Order.DESC;\n        this.pagination.setOrder(order);\n        button\n          .getElement()\n          .classList.toggle(styles.orderIconRotate, this.isASC);\n      },\n    );\n    button.getElement().classList.toggle(styles.orderIconRotate, this.isASC);\n    return button;\n  }\n\n  private createUIPanel(): HTMLDivElement {\n    const uiPanel = this.createDOMElement({\n      tagName: \"div\",\n      classList: [\n        utilitiesStyles.flex,\n        utilitiesStyles.gap20,\n        utilitiesStyles.alignCenter,\n        utilitiesStyles.widthFull,\n      ],\n    });\n\n    uiPanel.append(\n      this.createDropList(),\n      this.createOrderButton().getElement(),\n    );\n    return uiPanel;\n  }\n\n  private createDropList(): HTMLSelectElement {\n    const selectElement = this.createDOMElement({\n      tagName: \"select\",\n      classList: [styles.filter],\n    });\n    selectElement.addEventListener(\"change\", () => {\n      if (this.validator.validate(TypeNames.sort, selectElement.value)) {\n        this.sort = selectElement.value;\n        this.pagination.setSort(this.sort);\n      }\n    });\n\n    for (const value of Object.values(Sort)) {\n      const optionElement = this.createDOMElement({\n        tagName: \"option\",\n        textContent: value,\n        attributes: {\n          value: value,\n        },\n      });\n      if (value === this.sort) {\n        optionElement.selected = true;\n      }\n      selectElement.append(optionElement);\n    }\n\n    return selectElement;\n  }\n\n  private createWinnerTable(data: FullData[]): HTMLTableElement {\n    const table = this.createDOMElement({\n      tagName: \"table\",\n      classList: [styles.table, utilitiesStyles.widthFull],\n    });\n\n    this.tableWrapper.append(table);\n    table.append(this.createTableHeader());\n\n    for (const fullData of data.values()) {\n      table.append(this.createTableRow(fullData));\n    }\n    return table;\n  }\n\n  private createTableHeader(): HTMLTableRowElement {\n    const headers = WINNERS_TABLE_HEADERS;\n    const tr = this.createDOMElement({\n      tagName: \"tr\",\n      classList: [styles.tableRow],\n    });\n    for (const header of headers) {\n      const th = this.createDOMElement({\n        tagName: \"th\",\n        textContent: header,\n        classList: [styles.tableHeader],\n      });\n      tr.append(th);\n    }\n    return tr;\n  }\n\n  private createTableRow({\n    name,\n    color,\n    id,\n    wins,\n    time,\n  }: FullData): HTMLTableRowElement {\n    const tr = this.createDOMElement({\n      tagName: \"tr\",\n      classList: [styles.tableRow],\n    });\n\n    const rowData = [\n      id.toString(),\n      color,\n      name,\n      `${wins.toString()}${SUFFIXES.COUNT}`,\n      `${time.toFixed(TWO)}${SUFFIXES.SECONDS}`,\n    ];\n    for (const data of rowData) {\n      const td = this.createDOMElement({\n        tagName: \"td\",\n        classList: [styles.tableData],\n      });\n      if (data === color) {\n        const { use, svg } = this.createSVG({\n          classList: [carStyles.carIcon],\n          path: ICON_PATH.CAR,\n        });\n        use.setAttribute(ATTRIBUTES.FILL, color);\n        td.append(svg);\n      } else {\n        this.addTextContent(data, td);\n      }\n      tr.append(td);\n    }\n\n    return tr;\n  }\n}\n","import { Home } from \"@/pages/home/home.ts\";\nimport { NotFound } from \"@/pages/not-found.ts\";\nimport { Winners } from \"@/pages/winners/winners.ts\";\nimport type { ComponentConstructor } from \"@/types/router-type.ts\";\nimport { PAGE_PATH } from \"@/constants/constants.ts\";\n\nexport const appRoutes = new Map<string, ComponentConstructor>([\n  [PAGE_PATH.HOME, Home],\n  [PAGE_PATH.NOT_FOUND, NotFound],\n  [PAGE_PATH.WINNERS, Winners],\n]);\n","import {\n  EMPTY_STRING,\n  ERROR_MESSAGES,\n  MESSAGES,\n  PAGE_PATH,\n  SYMBOLS,\n} from \"@/constants/constants.ts\";\nimport type { Injectable } from \"@/types/di-container-types.ts\";\nimport { ServiceName } from \"@/types/di-container-types.ts\";\nimport type { Route } from \"@/types/router-type.ts\";\nimport { DIContainer } from \"@/services/di-container.ts\";\nimport { ActionType } from \"@/types/event-emitter-types.ts\";\n\nexport class Router implements Injectable {\n  public name: ServiceName = ServiceName.ROUTER;\n  private routes: Route = new Map();\n  private container: HTMLElement | null = null;\n\n  private currentPath = EMPTY_STRING;\n\n  constructor() {\n    globalThis.addEventListener(\"hashchange\", () => {\n      this.routerChange();\n    });\n  }\n\n  public setContainer(container: HTMLElement): this {\n    this.container = container;\n    return this;\n  }\n\n  public addRoutes(routes: Route): void {\n    this.routes = routes;\n    this.routerChange();\n  }\n\n  public navigateTo(path: string): void {\n    this.currentPath = path;\n    this.clearPage();\n    let route = this.routes.get(path) ?? this.routes.get(PAGE_PATH.NOT_FOUND);\n    if (!route) {\n      throw new Error(MESSAGES.ROUTE_NOT_FOUND);\n    }\n    globalThis.location.hash = path;\n    if (!this.container) {\n      throw new Error(ERROR_MESSAGES.CONTAINER_NOT_FOUND);\n    }\n    DIContainer.getInstance()\n      .getService(ServiceName.EVENT_EMITTER)\n      .notify({ type: ActionType.changeRoute, data: path });\n    this.container.append(new route().getElement());\n  }\n\n  private clearPage(): void {\n    if (!this.container) {\n      throw new Error(MESSAGES.ROUTE_NOT_FOUND);\n    }\n    this.container.replaceChildren();\n  }\n\n  private routerChange(): void {\n    const hash: string =\n      globalThis.location.hash.slice(SYMBOLS.HASH.length) || PAGE_PATH.HOME;\n    if (hash === this.currentPath) {\n      return;\n    }\n    this.navigateTo(hash);\n  }\n}\n","import {\n  API_HEADER,\n  API_URL,\n  COUNT_HEADER,\n  ERROR_MESSAGES,\n  ZERO,\n} from \"@/constants/constants.ts\";\nimport type {\n  ResponseData,\n  DeleteData,\n  CombinedResponse,\n  GetDataHandler,\n  CreateOrUpdateHandler,\n  SendData,\n} from \"@/types/api-service-types.ts\";\nimport { REQUEST_METHOD } from \"@/types/api-service-types.ts\";\nimport type { Injectable } from \"@/types/di-container-types.ts\";\nimport { ServiceName } from \"@/types/di-container-types.ts\";\nimport { errorHandler } from \"@/utilities/utilities.ts\";\nimport { DIContainer } from \"@/services/di-container.ts\";\nimport { TypeNames } from \"@/types/validator-types.ts\";\n\nexport class ApiService implements Injectable {\n  public name: ServiceName = ServiceName.API;\n  private baseUrl = API_URL;\n  private headers = API_HEADER;\n\n  public static getResponse: CombinedResponse<Response> = async (\n    url,\n    init?,\n  ) => {\n    const response = await fetch(url, init);\n    if (init?.signal?.aborted) {\n      throw new Error(ERROR_MESSAGES.ABORTED);\n    }\n    return response;\n  };\n\n  public static getResponseData: CombinedResponse<ResponseData> = async (\n    url,\n    init?,\n  ) => {\n    const response = await this.getResponse(url, init);\n    let totalCount;\n    if (!response.ok) {\n      throw response;\n    }\n    totalCount = ApiService.getTotalCountCars(response);\n    if (totalCount < ZERO) {\n      throw new Error(ERROR_MESSAGES.INVALID_DATA);\n    }\n    return {\n      data: await response.json(),\n      count: totalCount,\n    };\n  };\n\n  private static getTotalCountCars(response: Response): number {\n    const total = response.headers.get(COUNT_HEADER);\n    return total ? Number(total) : ZERO;\n  }\n\n  public getData: GetDataHandler = async (url) => {\n    const baseUrl = `${this.baseUrl}${url}`;\n    let data;\n    try {\n      data = await ApiService.getResponseData(baseUrl);\n    } catch (error) {\n      throw new Error(`${ERROR_MESSAGES.FETCH}${error}`);\n    }\n\n    const validator = DIContainer.getInstance().getService(\n      ServiceName.VALIDATOR,\n    );\n    if (!validator.validate(TypeNames.responseData, data)) {\n      throw new Error(ERROR_MESSAGES.INVALID_DATA);\n    }\n    return data;\n  };\n\n  public deleteData: DeleteData = async (url) => {\n    const baseUrl = `${this.baseUrl}${url}`;\n\n    try {\n      await ApiService.getResponse(baseUrl, {\n        method: REQUEST_METHOD.DELETE,\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n  };\n\n  public updateData: CreateOrUpdateHandler = async (url, data, signal?) => {\n    return await this.sendData(url, data, REQUEST_METHOD.PUT, signal);\n  };\n\n  public createData: CreateOrUpdateHandler = async (url, data, signal?) => {\n    return await this.sendData(url, data, REQUEST_METHOD.POST, signal);\n  };\n\n  public patchData: CreateOrUpdateHandler = async (url, data, signal?) => {\n    return await this.sendData(url, data, REQUEST_METHOD.PATCH, signal);\n  };\n\n  private sendData: SendData = async (url, data, method, signal?) => {\n    const baseUrl = `${this.baseUrl}${url}`;\n    const init: RequestInit = { method, signal };\n\n    if (method !== REQUEST_METHOD.PATCH) {\n      init.headers = this.headers;\n      init.body = JSON.stringify(data);\n    }\n    const response = await ApiService.getResponse(baseUrl, init);\n    if (!response.ok) {\n      throw response;\n    }\n    return await response.json();\n  };\n}\n","import { ANIMATE_FILL_MODE, ZERO } from \"@/constants/constants.ts\";\nimport type { Callback } from \"@/types\";\n\nexport class AnimateCar {\n  private animation: Animation | null = null;\n  private isAnimating = false;\n  constructor(private car: SVGElement) {}\n\n  public animate(distance: number, duration: number): void {\n    this.isAnimating = true;\n    this.animation = this.car.animate(\n      [\n        {\n          transform: `translateX(${ZERO}px)`,\n        },\n        {\n          transform: `translateX(${distance}px)`,\n        },\n      ],\n      {\n        duration: duration,\n        fill: ANIMATE_FILL_MODE,\n      },\n    );\n  }\n\n  public pause(): void {\n    this.animation?.pause();\n  }\n\n  public stop(): void {\n    this.isAnimating = false;\n    this.animation?.cancel();\n  }\n\n  public async reverse(rate: number, callback?: Callback): Promise<void> {\n    if (!this.animation || !this.isAnimating) {\n      return;\n    }\n    this.animation.updatePlaybackRate(rate);\n    this.animation.reverse();\n    this.animation.onfinish = (): void => {\n      this.onfinish(callback);\n    };\n  }\n\n  private onfinish(callback?: Callback): void {\n    this.animation?.reverse();\n    this.stop();\n    if (callback) {\n      callback();\n    }\n  }\n}\n","import { AnimateCar } from \"@/services/race/animate-car.ts\";\nimport {\n  ERROR_MESSAGES,\n  MS_IS_SECOND,\n  ONE,\n  TWO,\n  ZERO,\n} from \"@/constants/constants.ts\";\nimport type { AnimationData, RaceData } from \"@/types/race-service-types.ts\";\nimport { DIContainer } from \"@/services/di-container.ts\";\nimport type { Injectable } from \"@/types/di-container-types.ts\";\nimport { ServiceName } from \"@/types/di-container-types.ts\";\nimport { ActionType } from \"@/types/event-emitter-types.ts\";\nimport type { Callback } from \"@/types\";\nimport { errorHandler } from \"@/utilities/utilities.ts\";\n\nexport class RaceService implements Injectable {\n  public name: ServiceName = ServiceName.RACE;\n  private diContainer = DIContainer.getInstance();\n  private engineService = this.diContainer.getService(ServiceName.ENGINE);\n  private eventEmitter = this.diContainer.getService(ServiceName.EVENT_EMITTER);\n  private cars: Record<number, AnimationData> = {};\n  private distance = ZERO;\n  private container: HTMLElement | null = null;\n  private raceStack: number[] = [];\n  private abortControllers = new Map<number, AbortController>();\n\n  private static calculateDuration(data: RaceData): number {\n    return data.velocity > ZERO ? data.distance / data.velocity : ZERO;\n  }\n\n  public init(container: HTMLElement): void {\n    this.container = container;\n  }\n\n  public addCar(id: number, element: SVGElement): void {\n    this.cars[id] = {\n      id,\n      element,\n      duration: ZERO,\n    };\n  }\n\n  public resetCars(): void {\n    this.distance = ZERO;\n    this.cars = {};\n  }\n\n  public async startSingleRace(id: number): Promise<void> {\n    this.eventEmitter.notify({\n      type: ActionType.singleRaceStarted,\n      data: id,\n    });\n    this.raceStack.push(id);\n    await this.startEngine(id);\n    await this.startAnimation(id);\n  }\n\n  public async stopSingleRace(id: number, isRace = false): Promise<void> {\n    const car = this.cars[id];\n    const rate = (car.duration * TWO) / MS_IS_SECOND;\n    let callback: Callback | undefined;\n    callback = (): void => {\n      this.abortControllers.get(id)?.abort(ERROR_MESSAGES.RACE_STOPPED);\n      this.abortControllers.delete(id);\n    };\n    car.animation?.reverse(rate, callback);\n\n    await this.engineService.stop(id);\n    car.animation?.stop();\n    this.eventEmitter.notify({ type: ActionType.singleRaceEnded, data: id });\n    const index = this.raceStack.indexOf(id);\n    if (index >= ZERO) {\n      this.raceStack.splice(index, ONE);\n    }\n\n    this.distance = ZERO;\n    if (this.raceStack.length === ZERO && !isRace) {\n      this.eventEmitter.notify({ type: ActionType.raceEnded });\n    }\n  }\n\n  public async stopRace(): Promise<void> {\n    const stopPromises = [];\n    const raceStack = [...this.raceStack];\n\n    for (const id of raceStack) {\n      stopPromises.push(this.stopSingleRace(id, true));\n    }\n\n    try {\n      await Promise.allSettled(stopPromises);\n    } catch (error) {\n      errorHandler(error);\n    }\n    this.eventEmitter.notify({ type: ActionType.raceEnded });\n  }\n\n  public async startRace(): Promise<void> {\n    this.abortControllers.clear();\n    const startPromises = [];\n    const animationPromises = [];\n    this.eventEmitter.notify({ type: ActionType.raceStarted });\n    for (const id in this.cars) {\n      const promise = this.startEngine(Number(id));\n      startPromises.push(promise);\n      animationPromises.push(\n        promise.then(() => this.startAnimation(Number(id))),\n      );\n      this.raceStack.push(Number(id));\n    }\n    Promise.allSettled(startPromises).then(() => {\n      this.eventEmitter.notify({ type: ActionType.enginesStarted });\n    });\n\n    const carCount = this.raceStack.length;\n    let winnerId;\n    try {\n      winnerId = await Promise.any(animationPromises);\n    } catch (error) {\n      errorHandler(error);\n    }\n\n    if (!winnerId) {\n      return;\n    }\n\n    if (carCount > ONE && this.abortControllers.size === carCount) {\n      await this.diContainer.getService(ServiceName.WINNER).create({\n        id: winnerId,\n        wins: ONE,\n        time: this.cars[winnerId].duration / MS_IS_SECOND,\n      });\n    }\n  }\n\n  private async startEngine(id: number): Promise<void> {\n    const data = await this.engineService.start(id);\n    this.cars[id].duration = RaceService.calculateDuration(data);\n    if (this.distance === ZERO && this.container) {\n      this.distance =\n        this.container.clientWidth - this.cars[id].element.clientWidth;\n    }\n  }\n\n  private async startAnimation(id: number): Promise<number> {\n    const car = this.cars[id];\n    if (!car.animation) {\n      car.animation = new AnimateCar(car.element);\n    }\n    car.animation?.animate(this.distance, car.duration);\n    try {\n      await this.drive(id);\n      return id;\n    } catch (error) {\n      this.cars[id].animation?.pause();\n      throw error;\n    }\n  }\n\n  private async drive(id: number): Promise<void> {\n    const controller = new AbortController();\n    this.abortControllers.set(id, controller);\n    await this.engineService.drive(id, controller.signal);\n  }\n}\n","import type {\n  Action,\n  Observer,\n  RegisterObserver,\n} from \"@/types/event-emitter-types.ts\";\nimport type { Injectable } from \"@/types/di-container-types.ts\";\nimport { ServiceName } from \"@/types/di-container-types.ts\";\n\nexport class EventEmitter implements Injectable {\n  public name = ServiceName.EVENT_EMITTER;\n  private observers = new Map<string, Observer[]>();\n\n  public subscribe: RegisterObserver = (eventType, observer) => {\n    if (!this.observers.has(eventType)) {\n      this.observers.set(eventType, []);\n    }\n    const observers = this.observers.get(eventType);\n    observers?.push(observer);\n  };\n\n  public notify(event: Action): void {\n    const observers = this.observers.get(event.type);\n    if (observers) {\n      for (const observer of observers) {\n        observer.update(event);\n      }\n    }\n  }\n}\n","import type {\n  FullData,\n  GetWinnersHandler,\n  Winner,\n} from \"@/types/api-service-types.ts\";\nimport { API_URLS, ERROR_MESSAGES } from \"@/constants/constants.ts\";\nimport type { Injectable } from \"@/types/di-container-types.ts\";\nimport { ServiceName } from \"@/types/di-container-types.ts\";\nimport { DIContainer } from \"@/services/di-container.ts\";\nimport { ActionType } from \"@/types/event-emitter-types.ts\";\nimport { TypeNames } from \"@/types/validator-types.ts\";\n\nexport class WinnerService implements Injectable {\n  public name = ServiceName.WINNER;\n  private url = API_URLS.WINNERS;\n  private apiService;\n  private diContainer;\n  private validator;\n\n  constructor() {\n    this.diContainer = DIContainer.getInstance();\n    this.apiService = this.diContainer.getService(ServiceName.API);\n    this.validator = this.diContainer.getService(ServiceName.VALIDATOR);\n  }\n\n  private static createData(newData: Winner, oldData?: Winner): Winner {\n    if (!oldData) {\n      return newData;\n    }\n    return {\n      id: newData.id,\n      wins: newData.wins + oldData.wins,\n      time: Math.min(newData.time, oldData.time),\n    };\n  }\n\n  public async deleteWinner(id: number): Promise<void> {\n    const url = `${this.url}/${id}`;\n    void this.apiService.deleteData(url);\n  }\n\n  public async create(data: Winner): Promise<void> {\n    let initData: Winner | undefined;\n    let isCreate = false;\n    try {\n      initData = await this.getWinner(data.id);\n    } catch {\n      isCreate = true;\n    } finally {\n      const newData = WinnerService.createData(data, initData);\n      const url = isCreate ? this.url : `${this.url}/${data.id}`;\n      void (isCreate\n        ? this.apiService.createData(url, newData)\n        : this.apiService.updateData(url, newData));\n      void this.notify(newData);\n    }\n  }\n\n  public async notify(winnerData: Winner): Promise<void> {\n    const id = winnerData.id;\n    const data = await this.diContainer\n      .getService(ServiceName.GARAGE)\n      .getCar(id);\n    this.diContainer.getService(ServiceName.EVENT_EMITTER).notify({\n      type: ActionType.winnerDetected,\n      data: { name: data.name, id, time: winnerData.time },\n    });\n  }\n\n  public async getWinner(id: number): Promise<Winner> {\n    const url = `${this.url}/${id}`;\n    let data: unknown;\n\n    data = await this.apiService.getData(url);\n    if (\n      !this.validator.validate(TypeNames.responseData, data) ||\n      !this.validator.validate(TypeNames.winner, data.data)\n    ) {\n      throw new Error(ERROR_MESSAGES.INVALID_DATA);\n    }\n    return data.data;\n  }\n\n  public getPage: GetWinnersHandler = async (parameters) => {\n    const query = new URLSearchParams({\n      _page: String(parameters.page),\n      _limit: String(parameters.limit),\n      _sort: parameters.sort,\n      _order: parameters.order,\n    });\n    const url = `${this.url}?${query}`;\n    let data: unknown;\n\n    data = await this.apiService.getData(url);\n    if (!this.validator.validate(TypeNames.responseWinnerData, data)) {\n      throw new Error(ERROR_MESSAGES.INVALID_DATA);\n    }\n    const result: {\n      count: number;\n      data: FullData[];\n    } = {\n      count: data.count,\n      data: [],\n    };\n    for (const { id } of data.data) {\n      const carData = await this.diContainer\n        .getService(ServiceName.GARAGE)\n        .getCar(id);\n      const winner = data.data.find((item) => item.id === id);\n      if (winner) {\n        result.data.push({ ...winner, ...carData });\n      }\n    }\n    return result;\n  };\n}\n","import { DIContainer } from \"@/services/di-container.ts\";\nimport type { Injectable } from \"@/types/di-container-types.ts\";\nimport { ServiceName } from \"@/types/di-container-types.ts\";\nimport { API_URLS, ERROR_MESSAGES } from \"@/constants/constants.ts\";\nimport type {\n  CreateCar,\n  GetCarsHandler,\n  UpdateCar,\n} from \"@/types/api-service-types.ts\";\nimport { ActionType } from \"@/types/event-emitter-types.ts\";\nimport type { Car } from \"@/types\";\nimport { TypeNames } from \"@/types/validator-types.ts\";\n\nexport class GarageService implements Injectable {\n  public name = ServiceName.GARAGE;\n  private url = API_URLS.GARAGE;\n  private apiService;\n  private winnerService;\n  private eventEmitter;\n  private validator;\n  constructor() {\n    const diContainer = DIContainer.getInstance();\n    this.apiService = diContainer.getService(ServiceName.API);\n    this.winnerService = diContainer.getService(ServiceName.WINNER);\n    this.eventEmitter = diContainer.getService(ServiceName.EVENT_EMITTER);\n    this.validator = diContainer.getService(ServiceName.VALIDATOR);\n  }\n\n  public async deleteCar(id: number): Promise<void> {\n    const url = `${this.url}/${id}`;\n    await this.apiService.deleteData(url);\n    void this.winnerService.deleteWinner(id);\n  }\n\n  public getPage: GetCarsHandler = async (parameters) => {\n    const query = new URLSearchParams({\n      _page: String(parameters.page),\n      _limit: String(parameters.limit),\n    });\n    const url = `${this.url}?${query}`;\n    let data: unknown;\n\n    data = await this.apiService.getData(url);\n    if (!this.validator.validate(TypeNames.responseCarData, data)) {\n      throw new Error(ERROR_MESSAGES.INVALID_DATA);\n    }\n    return data;\n  };\n\n  public createCar: CreateCar = async (properties) => {\n    return await this.apiService.createData(this.url, properties);\n  };\n\n  public updateCar: UpdateCar = async ({ id, ...properties }) => {\n    const url = `${this.url}/${id}`;\n    await this.apiService.updateData(url, properties);\n    this.eventEmitter.notify({\n      type: ActionType.updateCar,\n      data: { id, ...properties },\n    });\n  };\n\n  public async getCar(id: number): Promise<Car> {\n    const url = `${this.url}/${id}`;\n    let data: unknown;\n\n    data = await this.apiService.getData(url);\n    if (\n      !this.validator.validate(TypeNames.responseData, data) ||\n      !this.validator.validate(TypeNames.car, data.data)\n    ) {\n      throw new Error(ERROR_MESSAGES.INVALID_DATA);\n    }\n    return data.data;\n  }\n}\n","import type { Injectable } from \"@/types/di-container-types.ts\";\nimport { ServiceName } from \"@/types/di-container-types.ts\";\nimport { API_URLS, ERROR_MESSAGES } from \"@/constants/constants.ts\";\nimport { DIContainer } from \"@/services/di-container.ts\";\nimport type { RequestEngine } from \"@/types/api-service-types.ts\";\nimport { EngineStatus } from \"@/types/api-service-types.ts\";\nimport { REQUEST_METHOD } from \"@/types/api-service-types.ts\";\nimport type { RaceData } from \"@/types/race-service-types.ts\";\nimport { TypeNames } from \"@/types/validator-types.ts\";\n\nexport class EngineService implements Injectable {\n  public name = ServiceName.ENGINE;\n  private url = API_URLS.ENGINE;\n  private apiService;\n  private validator;\n\n  constructor() {\n    const diContainer = DIContainer.getInstance();\n    this.apiService = diContainer.getService(ServiceName.API);\n    this.validator = diContainer.getService(ServiceName.VALIDATOR);\n  }\n\n  public async start(id: number): Promise<RaceData> {\n    return await this.requestEngine(EngineStatus.STARTED, id);\n  }\n  public async stop(id: number): Promise<RaceData> {\n    return await this.requestEngine(EngineStatus.STOPPED, id);\n  }\n  public async drive(id: number, signal?: AbortSignal): Promise<number> {\n    try {\n      await this.requestEngine(EngineStatus.DRIVE, id, signal);\n    } catch (error) {\n      if (\n        error instanceof Error &&\n        error.message === ERROR_MESSAGES.INVALID_DATA\n      ) {\n        return id;\n      }\n      throw error;\n    }\n    return id;\n  }\n\n  private requestEngine: RequestEngine = async (status, id, signal?) => {\n    const query = new URLSearchParams({\n      id: String(id),\n      status: status,\n    });\n    const url = `${this.url}?${query}`;\n    let data: unknown;\n    data = await this.apiService.patchData(url, {\n      method: REQUEST_METHOD.PATCH,\n      signal,\n    });\n    if (!this.validator.validate(TypeNames.raceData, data)) {\n      throw new Error(ERROR_MESSAGES.INVALID_DATA);\n    }\n    return data;\n  };\n}\n","import { LS_PREFIX } from \"@/constants/constants.ts\";\nimport type { Injectable } from \"@/types/di-container-types.ts\";\nimport { ServiceName } from \"@/types/di-container-types.ts\";\nimport type { TypeNames, TypesForValidator } from \"@/types/validator-types.ts\";\nimport { DIContainer } from \"@/services/di-container.ts\";\n\nexport class SessionStorage implements Injectable {\n  public name = ServiceName.STORAGE;\n  private readonly prefix = LS_PREFIX;\n  private validator = DIContainer.getInstance().getService(\n    ServiceName.VALIDATOR,\n  );\n\n  public save(key: string, value: unknown): void {\n    const storageKey = this.prefix + key;\n    globalThis.sessionStorage.setItem(storageKey, JSON.stringify(value));\n  }\n\n  public load<T extends TypeNames>(\n    key: string,\n    typeName: T,\n  ): TypesForValidator[T] | null {\n    const storageKey = this.prefix + key;\n    const value = globalThis.sessionStorage.getItem(storageKey);\n    if (!value) {\n      return null;\n    }\n    try {\n      const result = JSON.parse(value);\n      if (this.validator.validate(typeName, result)) {\n        return result;\n      }\n      return null;\n    } catch {\n      return null;\n    }\n  }\n}\n","import {\n  CAR_KEYS,\n  RACE_KEYS,\n  RESPONSE_DATA_KEYS,\n  WINNER_KEYS,\n  ZERO,\n} from \"@/constants/constants.ts\";\nimport type { Car, CarProperties, ModalData } from \"@/types\";\nimport type {\n  FullData,\n  ResponseCarData,\n  ResponseData,\n  ResponseWinnerData,\n  Winner,\n} from \"@/types/api-service-types.ts\";\nimport { Sort } from \"@/types/api-service-types.ts\";\nimport type { Injectable } from \"@/types/di-container-types.ts\";\nimport { ServiceName } from \"@/types/di-container-types.ts\";\nimport type { RaceData } from \"@/types/race-service-types.ts\";\nimport type { TypesForValidator } from \"@/types/validator-types.ts\";\nimport { TypeNames } from \"@/types/validator-types.ts\";\n\nexport class Validator implements Injectable {\n  public name = ServiceName.VALIDATOR;\n  private privateTypes = {\n    object: TypeNames.object,\n    string: TypeNames.string,\n    number: TypeNames.number,\n    boolean: TypeNames.boolean,\n  };\n\n  private typesConfig = {\n    [TypeNames.object]: (value: unknown): value is object =>\n      this.isObject(value),\n    [TypeNames.string]: (value: unknown): value is string =>\n      this.isString(value),\n    [TypeNames.number]: (value: unknown): value is number =>\n      this.isNumber(value),\n    [TypeNames.positiveNumber]: (value: unknown): value is number =>\n      this.isPositiveNumber(value),\n    [TypeNames.boolean]: (value: unknown): value is boolean =>\n      this.isBoolean(value),\n    [TypeNames.responseCarData]: (value: unknown): value is ResponseCarData =>\n      this.isResponseCarData(value),\n    [TypeNames.responseWinnerData]: (\n      value: unknown,\n    ): value is ResponseWinnerData => this.isResponseWinnerData(value),\n    [TypeNames.responseData]: (value: unknown): value is ResponseData =>\n      this.isResponseData(value),\n    [TypeNames.raceData]: (value: unknown): value is RaceData =>\n      this.isRaceData(value),\n    [TypeNames.carArray]: (value: unknown): value is Car[] =>\n      this.isCarArray(value),\n    [TypeNames.winnerArray]: (value: unknown): value is Winner[] =>\n      this.isWinnerArray(value),\n    [TypeNames.car]: (value: unknown): value is Car => this.isCar(value),\n    [TypeNames.winner]: (value: unknown): value is Winner =>\n      this.isWinner(value),\n    [TypeNames.carProperties]: (value: unknown): value is CarProperties =>\n      this.isCarProperties(value),\n    [TypeNames.modalData]: (value: unknown): value is ModalData =>\n      this.isModelData(value),\n    [TypeNames.sort]: Validator.isSort,\n    [TypeNames.fullData]: (value: unknown): value is FullData[] =>\n      this.isFullData(value),\n  };\n\n  private static isArrayOf<T>(\n    value: unknown,\n    check: (item: unknown) => item is T,\n  ): value is T[] {\n    return Array.isArray(value) && value.every((element) => check(element));\n  }\n\n  private static isSort(value: unknown): value is Sort {\n    return value === Sort.ID || value === Sort.TIME || value === Sort.WINS;\n  }\n\n  public validate<T extends TypeNames>(\n    typeName: T,\n    value: unknown,\n  ): value is TypesForValidator[T] {\n    return this.typesConfig[typeName](value);\n  }\n\n  private isObject(value: unknown): value is object {\n    return typeof value === this.privateTypes.object && value !== null;\n  }\n\n  private isString(value: unknown): value is string {\n    return typeof value === this.privateTypes.string;\n  }\n\n  private isNumber(value: unknown): value is number {\n    return typeof value === this.privateTypes.number;\n  }\n\n  private isBoolean(value: unknown): value is boolean {\n    return typeof value === this.privateTypes.boolean;\n  }\n\n  private isPositiveNumber(value: unknown): value is number {\n    return this.isNumber(value) && value >= ZERO;\n  }\n\n  private isResponseCarData(value: unknown): value is ResponseCarData {\n    if (!this.isResponseData(value)) {\n      return false;\n    }\n    return this.isCarArray(value.data);\n  }\n\n  private isResponseWinnerData(value: unknown): value is ResponseWinnerData {\n    if (!this.isResponseData(value)) {\n      return false;\n    }\n    return this.isWinnerArray(value.data);\n  }\n\n  private isResponseData(value: unknown): value is ResponseData {\n    if (!this.isObject(value)) {\n      return false;\n    }\n    return (\n      RESPONSE_DATA_KEYS.DATA in value && RESPONSE_DATA_KEYS.COUNT in value\n    );\n  }\n\n  private isRaceData(value: unknown): value is RaceData {\n    if (!this.isObject(value)) {\n      return false;\n    }\n    if (!(RACE_KEYS.DISTANCE in value && RACE_KEYS.VELOCITY in value)) {\n      return false;\n    }\n    return (\n      this.isPositiveNumber(value.distance) &&\n      this.isPositiveNumber(value.velocity)\n    );\n  }\n\n  private isCarArray(value: unknown): value is Car[] {\n    return Validator.isArrayOf(value, this.isCar.bind(this));\n  }\n\n  private isWinnerArray(value: unknown): value is Winner[] {\n    return Validator.isArrayOf(value, this.isWinner.bind(this));\n  }\n\n  private isFullData(value: unknown): value is FullData[] {\n    return this.isCarArray(value) && this.isWinnerArray(value);\n  }\n\n  private isCar(value: unknown): value is Car {\n    if (!this.isObject(value)) {\n      return false;\n    }\n\n    return (\n      this.checkCarProperties(value) &&\n      CAR_KEYS.ID in value &&\n      this.isPositiveNumber(value.id)\n    );\n  }\n\n  private isWinner(value: unknown): value is Winner {\n    if (!this.isObject(value)) {\n      return false;\n    }\n    if (\n      !(\n        WINNER_KEYS.ID in value &&\n        WINNER_KEYS.TIME in value &&\n        WINNER_KEYS.WINS in value\n      )\n    ) {\n      return false;\n    }\n\n    return (\n      this.isPositiveNumber(value.id) &&\n      this.isPositiveNumber(value.time) &&\n      this.isPositiveNumber(value.wins)\n    );\n  }\n\n  private isCarProperties(value: unknown): value is CarProperties {\n    return this.checkCarProperties(value);\n  }\n\n  private checkCarProperties(value: unknown): boolean {\n    if (!this.isObject(value)) {\n      return false;\n    }\n    if (!(CAR_KEYS.NAME in value && CAR_KEYS.COLOR in value)) {\n      return false;\n    }\n\n    return this.isString(value.name) && this.isString(value.color);\n  }\n\n  private isModelData(value: unknown): value is ModalData {\n    if (!this.isObject(value)) {\n      return false;\n    }\n    return (\n      CAR_KEYS.ID in value &&\n      this.isPositiveNumber(value.id) &&\n      CAR_KEYS.NAME in value &&\n      this.isString(value.name) &&\n      WINNER_KEYS.TIME in value &&\n      this.isPositiveNumber(value.time)\n    );\n  }\n}\n","import { DIContainer } from \"@/services/di-container.ts\";\nimport { ServiceName } from \"@/types/di-container-types.ts\";\nimport { Router } from \"@/services/router.ts\";\nimport { ApiService } from \"@/services/api/api-service.ts\";\nimport { RaceService } from \"@/services/race/race-service.ts\";\nimport { EventEmitter } from \"@/services/event-emitter.ts\";\nimport { WinnerService } from \"@/services/api/winner-service.ts\";\nimport { GarageService } from \"@/services/api/garage-service.ts\";\nimport { EngineService } from \"@/services/api/engine-service.ts\";\nimport { SessionStorage } from \"@/services/session-storage.ts\";\nimport { Validator } from \"@/services/validator.ts\";\n\nexport function registerServices(): void {\n  const diContainer = DIContainer.getInstance();\n  diContainer.register(ServiceName.ROUTER, Router);\n  diContainer.register(ServiceName.API, ApiService);\n  diContainer.register(ServiceName.RACE, RaceService);\n  diContainer.register(ServiceName.EVENT_EMITTER, EventEmitter);\n  diContainer.register(ServiceName.WINNER, WinnerService);\n  diContainer.register(ServiceName.GARAGE, GarageService);\n  diContainer.register(ServiceName.ENGINE, EngineService);\n  diContainer.register(ServiceName.STORAGE, SessionStorage);\n  diContainer.register(ServiceName.VALIDATOR, Validator);\n}\n","import { BaseComponent } from \"@/components/base-component.ts\";\nimport utilitiesStyles from \"@/styles/utilities.module.css\";\nimport styles from \"@/components/modal/base/modal.module.css\";\nimport { errorHandler } from \"@/utilities/utilities.ts\";\n\nexport abstract class BaseModal extends BaseComponent<\"dialog\"> {\n  protected readonly modalWrapper: HTMLDivElement;\n\n  protected constructor() {\n    super();\n    this.modalWrapper = this.addWrapper();\n    this.element.addEventListener(\"close\", () => {\n      this.element.remove();\n    });\n  }\n\n  public showModal(): void {\n    document.body.append(this.element);\n    try {\n      this.element.showModal();\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n\n  protected createElement(): HTMLDialogElement {\n    const modal = this.createDOMElement({\n      tagName: \"dialog\",\n      classList: [styles.modal],\n    });\n    modal.addEventListener(\"click\", (event) => {\n      if (event.target === event.currentTarget) {\n        this.element.close();\n      }\n    });\n    return modal;\n  }\n\n  protected addWrapper(): HTMLDivElement {\n    const modalWrapper = this.createDOMElement({\n      tagName: \"div\",\n      classList: [\n        styles.wrapper,\n        utilitiesStyles.flex,\n        utilitiesStyles.flexColumn,\n        utilitiesStyles.alignCenter,\n        utilitiesStyles.gap20,\n      ],\n    });\n    this.element.append(modalWrapper);\n    return modalWrapper;\n  }\n\n  protected abstract addContent(): HTMLElement;\n}\n","import { BaseModal } from \"@/components/modal/base/base-modal.ts\";\nimport utilitiesStyles from \"@/styles/utilities.module.css\";\nimport { ActionType } from \"@/types/event-emitter-types.ts\";\nimport type { ModalData } from \"@/types\";\nimport {\n  NOTIFICATION_TIME,\n  TIME_MESSAGE,\n  TWO,\n  WINNER_MESSAGE,\n} from \"@/constants/constants.ts\";\nimport { TypeNames } from \"@/types/validator-types.ts\";\nimport { ServiceName } from \"@/types/di-container-types.ts\";\nimport { DIContainer } from \"@/services/di-container.ts\";\n\nexport class WinnerModal extends BaseModal {\n  private static instance: WinnerModal | undefined;\n  private modalText: HTMLParagraphElement | null = null;\n  private constructor() {\n    super();\n    this.modalWrapper.append(this.addContent());\n    const validator = DIContainer.getInstance().getService(\n      ServiceName.VALIDATOR,\n    );\n    this.registerEvent(ActionType.winnerDetected, (winner) => {\n      if (validator.validate(TypeNames.modalData, winner)) {\n        this.showWinnerModal(winner);\n      }\n    });\n  }\n\n  public static getInstance(): WinnerModal {\n    if (!WinnerModal.instance) {\n      WinnerModal.instance = new WinnerModal();\n    }\n\n    return WinnerModal.instance;\n  }\n\n  public showWinnerModal(winner: ModalData): void {\n    this.changeWinner(winner);\n    this.showModal();\n\n    setTimeout(() => {\n      this.element.close();\n    }, NOTIFICATION_TIME);\n  }\n\n  public changeWinner(winner: ModalData): void {\n    if (this.modalText) {\n      this.modalText.textContent = `${WINNER_MESSAGE} ${winner.name} ${TIME_MESSAGE} ${winner.time.toFixed(TWO)}s`;\n    }\n  }\n\n  protected addContent(): HTMLDivElement {\n    const div = this.createDOMElement({\n      tagName: \"div\",\n      classList: [\n        utilitiesStyles.flex,\n        utilitiesStyles.flexColumn,\n        utilitiesStyles.alignCenter,\n        utilitiesStyles.gap20,\n      ],\n    });\n    const text = this.createDOMElement({\n      tagName: \"p\",\n      classList: [],\n    });\n\n    this.modalText = text;\n    div.append(text);\n    return div;\n  }\n}\n","import { Header } from \"@/components/header/header.ts\";\nimport { appRoutes } from \"@/pages/routes.ts\";\nimport { BUTTON_TEXT } from \"@/constants/buttons-constants.ts\";\nimport { ServiceName } from \"@/types/di-container-types.ts\";\nimport { registerServices } from \"@/services/services.ts\";\nimport { DIContainer } from \"@/services/di-container.ts\";\nimport { WinnerModal } from \"@/components/modal/winner-modal.ts\";\n\nexport function app(): void {\n  registerServices();\n\n  const body = document.body;\n  const header = new Header()\n    .addSettingsButton(BUTTON_TEXT.THEME)\n    .addPageButton(BUTTON_TEXT.TO_GARAGE)\n    .addPageButton(BUTTON_TEXT.TO_WINNERS)\n    .getElement();\n\n  const main = document.createElement(\"main\");\n  body.append(header, main);\n\n  DIContainer.getInstance()\n    .getService(ServiceName.ROUTER)\n    .setContainer(main)\n    .addRoutes(appRoutes);\n  WinnerModal.getInstance();\n}\n","import { app } from \"@/app.ts\";\n\napp();\n"],"names":["BUTTON_TEXT","BUTTON_TITLE","SVG_CONFIG","SPRITE_PATH","ICON_PATH","BUTTON_TYPES","APP_NAME","LS_PREFIX","ZERO","ONE","TWO","EMPTY_STRING","CARS_COUNT","MS_IS_SECOND","SYMBOLS","COLOR","PAGE_PATH","MESSAGES","API_URLS","CAR_KEYS","RACE_KEYS","RESPONSE_DATA_KEYS","WINNER_KEYS","CARS_PER_PAGE","WINNERS_PER_PAGE","API_URL","API_HEADER","COUNT_HEADER","NOTIFICATION_TIME","ERROR_MESSAGES","ATTRIBUTES","WINNER_MESSAGE","TIME_MESSAGE","PAGE_NAME","WINNERS_TABLE_HEADERS","SUFFIXES","ANIMATE_FILL_MODE","_DIContainer","__publicField","name","service","factoryService","DIContainer","ServiceName","BaseComponent","options","eventType","callback","callbackArray","textContent","element","tagName","classList","attributes","key","value","path","svg","use","event","child","ActionType","BaseButton","isDisabled","styles","id","isSingle","eventID","IconButton","ButtonSettings","isOn","action","ThemeButton","title","SettingsAction","button","DARK_THEME_MEDIA_QUERY","DARK_THEME_ATTRIBUTE","_ThemeService","themeButton","audioButton","isDark","ThemeService","TextButton","text","Header","buttonName","router","data","header","utilitiesStyles","headerPrimary","BaseInput","PLACEHOLDER","INPUT_TYPES","INPUT_NAMES","CarNameInput","carStyles","CarColorInput","CAR_MODELS","CAR_BRANDS","getColorValue","getRandomHEX","hexString","index","getRandomCarName","carBrandIndex","carBrand","carModelIndex","carModel","errorHandler","error","StorageKeys","TypeNames","BaseForm","carProperties","color","buttonText","form","formData","carNameInput","ControlsButtonConfig","PaginationButtonConfig","FormButtonsConfig","RaceButtonConfig","UpdateForm","closeButton","confirmButton","CarItem","diContainer","validator","carUse","carPanel","buttonWrapper","CarsList","list","_a","car","carData","carItem","CreateForm","storage","BasePagination","pageName","newPage","currentPage","isCreate","oldLastPage","isFirstPage","isLastPage","elementsCount","pagination","config","pageNameElement","openBracket","closeBracket","GaragePagination","Home","carsList","uiPanel","createForm","requests","request","NotFound","main","WinnerPagination","order","sort","REQUEST_METHOD","Order","Sort","EngineStatus","Winners","selectElement","optionElement","table","fullData","headers","tr","th","wins","time","rowData","td","appRoutes","Router","container","routes","route","hash","_ApiService","url","baseUrl","signal","method","init","response","total","totalCount","ApiService","AnimateCar","distance","duration","rate","RaceService","isRace","_b","stopPromises","raceStack","startPromises","animationPromises","promise","carCount","winnerId","controller","EventEmitter","observer","observers","WinnerService","parameters","query","result","winner","item","newData","oldData","initData","winnerData","GarageService","properties","EngineService","status","SessionStorage","storageKey","typeName","Validator","check","registerServices","BaseModal","modal","modalWrapper","_WinnerModal","div","WinnerModal","app","body"],"mappings":"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"}